% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/column_validators.R
\name{validate_columns}
\alias{validate_columns}
\title{Check that values in GWAS summary statistics columns are correct}
\usage{
validate_columns(
  tbl,
  col = c("B", "SE", "EAF", "N", "Z", "P", "POS", "CHR", "EffectAllele", "OtherAllele"),
  verbose = TRUE,
  convert_p = 2.225074e-308
)
}
\arguments{
\item{tbl}{a tibble in \code{\link[=tidyGWAS_columns]{tidyGWAS_columns()}} format.}

\item{col}{Which column to check values in?}

\item{verbose}{Should details about what is in each filter be reported?}

\item{convert_p}{if a pvalue is equal to 0, what value should be it be replaced with?
By default, the value is the smallest possible double that R can represent. When
P values are smaller than this, R often reads it in as a character. This can cause
issues in downstream analysis, and it is therefore recommended to deal with extremely
small pvalues early on.}
}
\value{
a \code{\link[dplyr:reexports]{dplyr::tibble()}}, with a column added named as invalid_{col}.
If you validate the "B" column, validate_columns will add a TRUE/FALSE column
named invalid_B to the input tibble.
}
\description{
\code{validate_columns()} does not remove any rows, but adds a TRUE/FALSE
flag for the specified column.
}
\examples{
\dontrun{
gwas_file <- validate_columns(
 tbl = gwas_file,
 col = "B",
 verbose = FALSE,
 # if you want to keep 0 pvalues as 0.
 convert_p = 0
)
dplyr::filter(gwas_file, invalid_P)
}

}
