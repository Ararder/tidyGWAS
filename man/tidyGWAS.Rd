% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidyGWAS.R
\name{tidyGWAS}
\alias{tidyGWAS}
\title{Execute validation and quality control of GWAS summmary statistics}
\usage{
tidyGWAS(
  tbl,
  dbsnp_path,
  ...,
  column_map,
  output_format = c("csv", "parquet", "hivestyle"),
  build = c("NA", "37", "38"),
  outdir = paste0(tempdir(), "/", stringr::str_replace_all(date(), pattern = c(` ` = "_",
    `:` = "_"))),
  convert_p = 2.225074e-308,
  indel_strategy = c("keep", "remove"),
  overwrite = FALSE,
  repair_cols = TRUE,
  logfile = FALSE,
  verbose = FALSE,
  add_missing_build = TRUE
)
}
\arguments{
\item{tbl}{a \code{data.frame} or \code{character()} vector}

\item{dbsnp_path}{filepath to the dbSNP155 directory (untarred dbSNP155.tar)}

\item{...}{pass additional arguments to \code{\link[arrow:read_delim_arrow]{arrow::read_delim_arrow()}}, if tbl is a filepath.}

\item{column_map}{a named list of column names, to be used to rename columns.
The names must be tidyGWAS column names, and the values must be the column names in the input summary statistics.}

\item{output_format}{How should the finished cleaned file be saved?
\itemize{
\item "'csv' corresponds to \code{\link[arrow:write_csv_arrow]{arrow::write_csv_arrow()}}
\item 'parquet' corresponds to \code{\link[arrow:write_parquet]{arrow::write_parquet()}}
\item 'hivestyle' corresponds to \code{\link[arrow:write_dataset]{arrow::write_dataset()}} split by CHR
}}

\item{build}{If you are sure of what genome build (GRCh37 or GRCH37), can be used to skip \code{\link[=infer_build]{infer_build()}}}

\item{outdir}{filepath to a folder where data should be stored.}

\item{convert_p}{What value should be used for P = 0?}

\item{indel_strategy}{Should indels be kept or removed?}

\item{overwrite}{Should existing files be overwritten?}

\item{repair_cols}{Should any missing columns be repaired?}

\item{logfile}{Should messages be redirected to a logfile?}

\item{verbose}{Explain filters in detail?}

\item{add_missing_build}{Should the build which the sumstats are NOT on also be added in?}
}
\value{
a \code{\link[dplyr:reexports]{dplyr::tibble()}}
}
\description{
\code{tidyGWAS()} performs a set of validations on input colummns, repairs missing
columns, and can add missing CHR/POS or RSID. In addition, CHR and POS is
standardised to GRCh38, with coordinates on GRCh37 added in as well.

Briefly, \code{tidyGWAS()} updates RSID if possible using the
\href{https://ftp.ncbi.nih.gov/snp/latest_release/JSON/}{refsnp-merged} file
from dbSNP. Each inputed column is then validated and coerced to
the correct type. Missing CHR/POS or RSID is detected and imputed using
\code{\link[=repair_rsid]{repair_rsid()}} or \code{\link[=repair_chr_pos]{repair_chr_pos()}}.

If statistis such as \code{P}, \code{B} are missing, \code{tidyGWAS()} will attempt to impute
them if possible using \code{\link[=repair_stats]{repair_stats()}}

Standard column names are assumed, BEFORE inputting into the function. This is
a deliberate decision, as automatic parsing of some important column names
can be ambigious For example, in some sumstats, A1 referes to effect allele,
while other formats use A1 as non-effect allele. \code{\link[=tidyGWAS_columns]{tidyGWAS_columns()}} can be
used to standardise column names, and see the standard format.
}
\examples{
\dontrun{
tidyGWAS(tbl = "my_dataframe", logfile = "true", name = "test_run", outdir = "gwas_sumstat_dir")
}
}
