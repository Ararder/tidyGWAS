% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidyGWAS.R
\name{tidyGWAS}
\alias{tidyGWAS}
\title{Execute validation and quality control of GWAS summmary statistics}
\usage{
tidyGWAS(
  tbl,
  dbsnp_path,
  ...,
  column_names,
  output_format = c("hivestyle", "parquet", "csv"),
  output_dir = paste0(tempdir(), "/", stringr::str_replace_all(date(), pattern = c(` ` =
    "_", `:` = "_"))),
  CaseN = NULL,
  ControlN = NULL,
  N = NULL,
  build = c("NA", "37", "38"),
  default_build = c("37", "38"),
  indel_strategy = c("keep", "remove"),
  convert_p = 2.225074e-308,
  repair_cols = TRUE,
  logfile = FALSE
)
}
\arguments{
\item{tbl}{a \code{data.frame} or \code{character()} vector}

\item{dbsnp_path}{filepath to the dbSNP155 directory (untarred dbSNP155.tar)}

\item{...}{pass additional arguments to \code{\link[arrow:read_delim_arrow]{arrow::read_delim_arrow()}}, if tbl is a filepath.}

\item{column_names}{a named list of column names, to be used to rename columns.}

\item{output_format}{How should the finished cleaned file be saved?
\itemize{
\item "'csv' corresponds to \code{\link[arrow:write_csv_arrow]{arrow::write_csv_arrow()}}
\item 'parquet' corresponds to \code{\link[arrow:write_parquet]{arrow::write_parquet()}}
\item 'hivestyle' corresponds to \code{\link[arrow:write_dataset]{arrow::write_dataset()}} split by CHR
}}

\item{output_dir}{filepath to a folder where data should be stored. The folder should not yet exist.}

\item{CaseN}{manually input number of cases}

\item{ControlN}{manually input number of controls}

\item{N}{manually input sample size}

\item{build}{If you are sure of what genome build ('37' or '38'), can be used to skip \code{\link[=infer_build]{infer_build()}} and speed up computation}

\item{default_build}{If only RSID exists, the build cannot be inferred. Nonetheless,
tidyGWAS applies a filter on incompatible alleles with GRCh37/38. In such a case,
tidyGWAS needs to decide on which reference genome to compare alleles with.}

\item{indel_strategy}{Should indels be kept or removed?}

\item{convert_p}{What value should be used for when P-value has been rounded to 0?}

\item{repair_cols}{Should any missing statistical columns be repaired if possible?}

\item{logfile}{Should messages be redirected to a logfile?}
}
\value{
a \code{\link[dplyr:reexports]{dplyr::tibble()}}
}
\description{
\code{tidyGWAS()} performs a set of validations on input colummns, repairs missing
columns, and can add missing CHR/POS or RSID. In addition, CHR and POS is
standardised to GRCh38, with coordinates on GRCh37 added in as well.

Briefly, \code{tidyGWAS()} updates RSID if possible using the
\href{https://ftp.ncbi.nih.gov/snp/latest_release/JSON/}{refsnp-merged} file
from dbSNP. Each inputed column is then validated and coerced to
the correct type.

If statistis such as \code{P}, \code{B} are missing, \code{tidyGWAS()} will attempt to impute
them if possible using \code{\link[=repair_stats]{repair_stats()}}

Standard column names are assumed, BEFORE inputting into the function. This is
a deliberate decision, as automatic parsing of some important column names
can be ambigious For example, in some sumstats, A1 referes to effect allele,
while other formats use A1 as non-effect allele.
}
\examples{
\dontrun{
tidyGWAS(tbl = "my_dataframe", logfile = "true", name = "test_run", outdir = "gwas_sumstat_dir")
}
}
