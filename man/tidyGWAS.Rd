% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidyGWAS.R
\name{tidyGWAS}
\alias{tidyGWAS}
\title{Execute validation and quality control of GWAS summmary statistics}
\usage{
tidyGWAS(
  tbl,
  ...,
  dbsnp_path,
  output_format = c("csv", "hivestyle", "parquet"),
  build = c("NA", "37", "38"),
  outdir = tempdir(),
  study_n,
  convert_p = 2.225074e-308,
  name = stringr::str_replace_all(date(), pattern = c(` ` = "_", `:` = "_")),
  keep_indels = TRUE,
  repair_cols = TRUE,
  logfile = FALSE,
  log_on_err = "tidyGWAS_logfile.txt",
  verbose = FALSE
)
}
\arguments{
\item{tbl}{a `data.frame` or `character()` vector}

\item{...}{pass arguments to to [arrow::read_delim_arrow()] which is the function
that will be called if tbl is a filepath
possible arguments are `study_n` to set N, and `build` to set genome build.}

\item{dbsnp_path}{filepath to the dbSNP155 directory (untarred dbSNP155.tar)}

\item{output_format}{How should the finished cleaned file be saved?
* "csv" corresponds to [arrow::write_csv_arrow()]
* 'hivestyle' corresponds to [arrow::write_dataset()] split by CHR
* 'parquet' corresponds to [arrow::write_parquet()]}

\item{build}{Can be used to skip [infer_build()]}

\item{outdir}{Where should results be saved after a succesful execution?}

\item{convert_p}{What value should be used for P = 0?}

\item{name}{name of the output directory}

\item{keep_indels}{Should indels be kept?}

\item{repair_cols}{Should any missing columns be repaired?}

\item{logfile}{Should messages be redirected to a logfile?}

\item{log_on_err}{Optional. Can pass a filepath to copy the logfile to when the function exists.}

\item{verbose}{Explain filters in detail?}

\item{implementation}{Use arrow or bsgenome as backend to interact with dbSNP? Only arrow is supported at the moment}
}
\value{
a tibble or NULL, depending on outdir
}
\description{
`tidyGWAS()` performs a set of validations on input colummns, repairs missing
columns, and can add missing CHR/POS or RSID. In addition, CHR and POS is
standardised to GRCh38, with coordinates on GRCh37 added in as well.

Briefly, `tidyGWAS()` updates RSID if possible using RsMergeArch file
from dbSNP. Each inputed column is then validated and coerced to
the correct type. Missing CHR/POS or RSID is detected and imputed using
[repair_rsid()] or [repair_chr_pos()]. If both RSID and CHR:POS is present,
[verify_chr_pos_rsid()] is executed to check that dbSNP CHR:POS:RSID agrees
with CHR:POS:RSID in `tbl`.

If statistis such as `P`, `B` are missing, `tidyGWAS()` will attempt to impute
them if possible using [repair_stats()]

Standard column names are assumed, BEFORE inputting into the function. This is
a deliberate decision, as automatic parsing of some important column names
can be ambigious For example, in some sumstats, A1 referes to effect allele,
while other formats use A1 as non-effect allele. [tidyGWAS_columns()] can be
used to standardise column names, and see the standard format.
}
\examples{
\dontrun{
tidyGWAS(tbl = "my_dataframe", logfile = "true", name = "test_run", outdir = "gwas_sumstat_dir")
}
}
