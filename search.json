[{"path":"http://arvidharder.com/tidyGWAS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tidyGWAS authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"tidyGWAS","text":"tidyGWAS dependencies easily installed systems, arrow dependecy likely cause trouble. case installation arrow causing trouble, see .","code":"# install.packages(\"devtools\") devtools::install_github(\"ararder/tidyGWAS\") # or # install.packages(\"remotes\") remotes::install_github(\"ararder/tidyGWAS\")"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"dbsnp155-reference-file","dir":"Articles","previous_headings":"Installation","what":"dbSNP155 reference file","title":"tidyGWAS","text":"tidyGWAS uses version dbSNP 155 converted Apache Arrow .parquet files. can download dbSNP155 reference file inside R using googledrive package, manually navigating file file needs untarred provide full path directory dbSNP155, contain following folders untarring.","code":"# You can download the file from inside R using the googledrive package: library(googledrive) googledrive::drive_deauth() id <- googledrive::as_id(\"1LmgfmTQaWwJaFpBHcRQIY_kwe5iN7Pj6\")  ##### EDIT THIS: filepath_to_store_dir <- \"\" ##### ---------------------  drive_download(id, path = filepath_to_store_dir) # change directory to where the downloaded file is tar -xf dbSNP155.tar dbSNP155 library(fs) # # this is how the untarred folder should look if you ls inside it dir_ls(path(fs::path_package(\"tidyGWAS\"), \"extdata/dbSNP155\")) #> /home/runner/work/_temp/Library/tidyGWAS/extdata/dbSNP155/GRCh37 #> /home/runner/work/_temp/Library/tidyGWAS/extdata/dbSNP155/GRCh38 #> /home/runner/work/_temp/Library/tidyGWAS/extdata/dbSNP155/refsnp-merged"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"tidyGWAS","text":"","code":"library(tidyGWAS) library(fs) example_file <- tidyGWAS::test_file  # Change this to fit your own system. Here a very small demo version is used dbsnp_file <-  path(fs::path_package(\"tidyGWAS\"), \"extdata/dbSNP155\")   suppressMessages(   cleaned <- tidyGWAS(   # only tbl (the data.frame), is a mandatory argument.   tbl = example_file,    # However, if the dbsnp_path argument is not passed,   # no comparisons against dbSNP155 will be done, or any   # merged RSIDs will be updated   dbsnp_path = dbsnp_file   ) )"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"a-more-typical-functional-call","dir":"Articles","previous_headings":"Getting started","what":"A more typical functional call","title":"tidyGWAS","text":"Typically, call tidyGWAS() arguments. default tidyGWAS() use base::tempdir() write execution. addition, cleaned sumstat also returned function. final output also saved tempdir. Since temporary directory, loose files exit R Session. behaviour can adjusteded outdir argument. Let’s take look typical call tidyGWAS look: Now saved output gwas_folder . using name outdir argument, tidyGWAS saved output outdir, directory named “my_first_tidyGWAS”. Inside folder several files can used understand tidyGWAS done. tidyGWAS_logfile.txt contains messages see printed . /pipeline_info/ can find files containing rowid rows removed. /raw_sumstats.parquet, can find raw sumstats, passed tidyGWAS().","code":"# here is where you would substite your own sumstats, either as a filepath, # or in-memory data.frame  # your own sumstat your_sumstats <- tidyGWAS::test_file  # a directory where you want your data to be stored after succesful cleaning. gwas_folder <- withr::local_tempdir()  cleaned <- tidyGWAS(   tbl = your_sumstats,    dbsnp_path = dbsnp_file,   # it's useful to write all the messages to a logfile, so messages are saved.   logfile=TRUE,   # by default, the name of the output folder is a concotonated call to Sys.time()   # but you can adjust this by using the name argument   name = \"my_first_tidyGWAS\",   # by default, the saved file is written out as a gzipped csv file,   # however, the arrow parquet format offers many advantages over the classical csv file   output_format = \"parquet\",   # by passing the argument outdir, you can tell tidyGWAS to copy over files   # after a finished execution to that directory   outdir = gwas_folder   ) #> ℹ Output is redirected to logfile: /tmp/RtmpUZGSHH/my_first_tidyGWAS/my_first_tidyGWAS/tidyGWAS_logfile.txt #>  #> ── Running tidyGWAS 0.2.0 ────────────────────────────────────────────────────── #> Starting at 2023-08-23 08:39:33.826986, with 100000 in input data.frame #> ℹ Saving all files during execution to /tmp/RtmpUZGSHH/my_first_tidyGWAS/my_first_tidyGWAS, #>  #> ℹ After execution, files will be copied to /tmp/RtmpUZGSHH/file17874027b11a/my_first_tidyGWAS #>  #> ℹ Detected 100000 rows in input summary statistics #>  #>  #>  #> ── 1) Checking that columns follow tidyGWAS format  #>  #> ✔ The following columns are used for further steps: CHR, POS, RSID, EffectAllele, OtherAllele, B, SE, EAF, INFO, P, CaseN, ControlN, and rowid #>  #>  #>  #> ── 1) Scanning for rows with NA ── #>  #>  #>  #> ✔ No rows contained missing values #>  #>  #>  #> ── 2) Updating merged RSIDs ── #>  #>  #>  #> ✔ 175 rows with updated RSID #>  #> • #> /tmp/RtmpUZGSHH/my_first_tidyGWAS/my_first_tidyGWAS/pipeline_info/updated_rsid.parquet #>  #>  #>  #> ── 3) Scanning for rows with duplications ── #>  #>  #>  #> ℹ A unique ID is formed by concontenating CHR, POS, EffectAllele, and OtherAllele #>  #> ✔ Found no duplications #>  #>  #>  #> ── 4) Scanning for indels ── #>  #>  #>  #>   1. EffectAllele or OtherAllele, character length > 1: A vs AA #>  #>   2. EffectAllele or OtherAllele coded as 'D', 'I', or 'R' #>  #> ✔ Detected 0 rows as indels #>  #>  #>  #> ── 5) Scanning for invalid RSID  ── #>  #>  #>  #> ℹ Found 307 rows with invalid RSID format. RSID will be repaired using CHR:POS if `dbsnp_files is passed` #>  #>  #>  #> ── Validating columns, for main rows ── #>  #>  #>  #> ℹ The median value of B is -0.0012, which seems reasonable #>  #>  #>  #> ── All rows passed validation ── #>  #>  #>  #> ── Validating columns, for rows without RSID ── #>  #>  #>  #> ℹ The median value of B is -0.0022, which seems reasonable #>  #>  #>  #> ── All rows passed validation ── #>  #>  #>  #> ── Validating CHR/POS/RSID dbSNP for main rows ── #>  #>  #>  #> • Remove rows where REF/ALT in dbSNP is not compatible with EffectAllele / #> OtherAllele #>  #> • Remove rows where RSID/CHR:POS does not match a entry in dbSNP v.155 #>  #> • Checking that CHR:POS and RSID match. RSID will be updated accordingly to #> dbSNP #>  #> ℹ Inferring build by checking 10000 snps matches against GRCh37 and GRCh38 #>  #> 3471 snps matched GRCh38, 9999 for GRCh37, inferring build to be 37 #> ℹ A total of 11 rows had incompatible CHR:POS and RSID data. These have been updated #>  #> • Checking for incompatible alleles #>  #>  #>  #> ── Listing how many rows are removed per flag:  ── #>  #>  #>  #>   no_dbsnp_entry: 11 #>  #> Removed a total of 11 rows: #> /tmp/RtmpUZGSHH/my_first_tidyGWAS/my_first_tidyGWAS/pipeline_info/removed_rows_main_incompat_alleles_or_not_in_dbsnp.parquet #>  #>  #> ── Validating CHR/POS/RSID using dbSNP for rows without RSID ── #>  #>  #>  #> • Remove rows where REF/ALT in dbSNP is not compatible with EffectAllele / #> OtherAllele #>  #> • Remove rows where RSID/CHR:POS does not match a entry in dbSNP v.155 #>  #> • Repairing RSID #>  #> ℹ Inferring build by checking 10000 snps matches against GRCh37 and GRCh38 #>  #> 101 snps matched GRCh38, 306 for GRCh37, inferring build to be 37 #>  #>  #> ── All rows passed validation ── #>  #>  #>  #> ℹ Z missing: Calculating Z using the formula:  Z = B / SE #>  #>  #>  #> ── Finished repair_stats:   #>  #> ℹ Added 1 new columns: Z #>  #> ✔ Detected 0 rows as indels #>  #>  #>  #> ── Listing final breakdown of removed rows:   #>  #>   main_incompat_alleles_or_not_in_dbsnp: 11 #>  #>  #>  #> ── Finished tidyGWAS ─────────────────────────────────────────────────────────── #>  #> ℹ A total of 11 rows were removed #>  #> ℹ Total running time: 10.1s dir_ls(gwas_folder, recurse = TRUE) #> /tmp/RtmpUZGSHH/file17874027b11a/my_first_tidyGWAS #> /tmp/RtmpUZGSHH/file17874027b11a/my_first_tidyGWAS/cleaned_GRCh38.parquet #> /tmp/RtmpUZGSHH/file17874027b11a/my_first_tidyGWAS/pipeline_info #> /tmp/RtmpUZGSHH/file17874027b11a/my_first_tidyGWAS/pipeline_info/removed_rows_main_col_validation.parquet #> /tmp/RtmpUZGSHH/file17874027b11a/my_first_tidyGWAS/pipeline_info/removed_rows_main_incompat_alleles_or_not_in_dbsnp.parquet #> /tmp/RtmpUZGSHH/file17874027b11a/my_first_tidyGWAS/pipeline_info/removed_rows_without_rsid_col_validation.parquet #> /tmp/RtmpUZGSHH/file17874027b11a/my_first_tidyGWAS/pipeline_info/removed_rows_without_rsid_incompat_alleles_or_not_in_dbsnp.parquet #> /tmp/RtmpUZGSHH/file17874027b11a/my_first_tidyGWAS/pipeline_info/updated_rsid.parquet #> /tmp/RtmpUZGSHH/file17874027b11a/my_first_tidyGWAS/raw_sumstats.parquet #> /tmp/RtmpUZGSHH/file17874027b11a/my_first_tidyGWAS/tidyGWAS_logfile.txt"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"hivestyle-partitioning","dir":"Articles","previous_headings":"Getting started","what":"Hivestyle partitioning","title":"tidyGWAS","text":"might noted possible arguments output_format. last option “hivestyle”, splits dataset separate files based CHR. vignette(\"Hivestyle-partitioning\") explains format can used analyse many summary statistics time, low memory cost speed.","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"creating-the-correct-column-names","dir":"Articles","previous_headings":"Getting started","what":"Creating the correct column names","title":"tidyGWAS","text":"tidyGWAS automatically detect column names, expect dplyr::tibble() contain correct column names. tidyGWAS_columns helper function created match column name tidyGWAS format.","code":"# what if we have a file where POS was named bp, and B was named BETA? # tidyGWAS will not recognize these as valid column names and would drop them. wrong_colnames <- dplyr::rename(example_file, bp = POS, BETA = B) head(wrong_colnames) #>   CHR       bp        RSID EffectAllele OtherAllele         BETA     SE #> 1   6 31819813 rs183988210            C           G -0.005696193 0.0292 #> 2  16 13991338   rs8044430            T           C -0.017695649 0.0092 #> 3   9 85016930 rs111404043            A           T -0.002302649 0.0185 #> 4  19 15743403   rs4807961            C           G  0.002397125 0.0099 #> 5  18  5948313    rs948293            T           C  0.001698557 0.0092 #> 6  13 47224772       rs837            G           A  0.027196792 0.0086 #>         EAF  INFO        P CaseN ControlN #> 1 0.9754088 0.936 0.844400 51235    74087 #> 2 0.6407741 0.951 0.053150 53386    77258 #> 3 0.9160000 0.701 0.899700 53386    77258 #> 4 0.2556345 0.996 0.807400 53386    77258 #> 5 0.3318173 0.971 0.857800 53386    77258 #> 6 0.4470432 1.010 0.001594 53386    77258 # we can use tidyGWAS_columns to specify current names: correct_names <- tidyGWAS_columns(   # first argument is the data.frame   tbl = wrong_colnames,    # then any column which is not correctly named:   POS = \"bp\",   B = \"BETA\"   ) head(correct_names) #>   CHR      POS        RSID EffectAllele OtherAllele            B     SE #> 1   6 31819813 rs183988210            C           G -0.005696193 0.0292 #> 2  16 13991338   rs8044430            T           C -0.017695649 0.0092 #> 3   9 85016930 rs111404043            A           T -0.002302649 0.0185 #> 4  19 15743403   rs4807961            C           G  0.002397125 0.0099 #> 5  18  5948313    rs948293            T           C  0.001698557 0.0092 #> 6  13 47224772       rs837            G           A  0.027196792 0.0086 #>          P       EAF CaseN ControlN  INFO #> 1 0.844400 0.9754088 51235    74087 0.936 #> 2 0.053150 0.6407741 53386    77258 0.951 #> 3 0.899700 0.9160000 53386    77258 0.701 #> 4 0.807400 0.2556345 53386    77258 0.996 #> 5 0.857800 0.3318173 53386    77258 0.971 #> 6 0.001594 0.4470432 53386    77258 1.010"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"computational-cost","dir":"Articles","previous_headings":"","what":"Computational cost","title":"tidyGWAS","text":"Memory use time scales size summary statistics. running tidyGWAS experimentally, ’s estimation time memory.","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"cpu-usage","dir":"Articles","previous_headings":"Computational cost","what":"CPU usage","title":"tidyGWAS","text":"CPU usage depends heavily underlying architecture, CPU. Macbook Pro M2: 8 million rows, ~4.42 minutes, < 16GB memory used AMD EPYC 75F3 32-Core Processor; ~ 6 minutes < 16GB memory used 60 million rows: AMD EPYC 75F3 32-Core Processor; ~ 34 minutes < 75gb using 5 cores","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"memory-usage-and-number-of-rows","dir":"Articles","previous_headings":"Computational cost","what":"Memory usage and number of rows","title":"tidyGWAS","text":"memory usage likely main constraint increasing size summary statistics. 20 million rows < 20gb 40 million rows < 40gb 60 million rows < 75gb","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"a-note-on-multiple-cores","dir":"Articles","previous_headings":"Computational cost","what":"A note on multiple cores","title":"tidyGWAS","text":"main computational cost reading transforming dbSNP 155 reference data. handled Apache Arrow C++ implementation, automatically detects number cores available.","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"reading-in-files-from-disk","dir":"Articles","previous_headings":"","what":"Reading in files from disk","title":"tidyGWAS","text":"Behind scenes, tidyGWAS uses arrow::read_delim_arrow() read file using filepath provided. …, can pass specific arguments file requires adjustments read propery, delim = \"\\t\". can read . general, GWAS file format tidyGWAS struggles read properly, often easy first read file using data.table::fread() readr::read_tsv, package focus specifically reading files, passing data.frame tidyGWAS -memory","code":"file <- data.table::fread(\"/file/that/is/challenging_to_read.vcf.gz\") tidyGWAS(   tbl = file,   dbsnp_path = dbsnp_files )"},{"path":[]},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"getting-b-and-se-from-z-n-and-eaf","dir":"Articles","previous_headings":"Other functions","what":"Getting B and SE from Z, N and EAF","title":"tidyGWAS","text":"repair_stats() can used add missing statistics column, P, Z, B SE, depending columns exist. Note ","code":"example_file <- dplyr::tibble(test_file) # Has Z , EAF and N, but not B and SE (Which are commonly used for PRS) tmp <- dplyr::mutate(example_file, Z = B/SE, N = CaseN + ControlN) |>    dplyr::select(-B, -SE) repaired <- repair_stats(tmp)  # the Betas will be on a standardized scale, and can therefore be different # than what was initially there dplyr::inner_join(example_file, repaired,by = \"RSID\") |> dplyr::select(B.x, B.y) |>    dplyr::summarise(cor(B.x, B.y))   # Getting Z, if you only have B and P tmp <-  dplyr::select(example_file,  -SE) |>    repair_stats()"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"identifying-incorrect-rsids","dir":"Articles","previous_headings":"Other functions","what":"Identifying incorrect RSIDs","title":"tidyGWAS","text":"uses regex identify non RrSs rows.","code":"flag_invalid_rsid(example_file) |>    dplyr::filter(invalid_rsid)"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"a-fast-function-for-finding-all-rows-in-a-duplication-set","dir":"Articles","previous_headings":"Other functions","what":"A fast function for finding all rows in a duplication set","title":"tidyGWAS","text":"","code":"flag_duplicates(example_file, column = \"rsid\") # or  flag_duplicates(example_file, column = \"chr_pos\")"},{"path":"http://arvidharder.com/tidyGWAS/articles/transforming_dbsnp_to_parquet.html","id":"converting-dbsnp-to--parquet-files","dir":"Articles","previous_headings":"","what":"Converting dbSNP to .parquet files","title":"get-to-know-dbsnp","text":"dbSNP data accessed munged BSgenome package. Takes 10~30 minutes per chromosome, peak memory usage ~80gb chromosome 2","code":"library(arrow) library(BSgenome) library(glue)  chr <- commandArgs(trailingOnly = TRUE)[1] build <- commandArgs(trailingOnly = TRUE)[2]  if(build == \"37\") {   snps <- SNPlocs.Hsapiens.dbSNP155.GRCh37::SNPlocs.Hsapiens.dbSNP155.GRCh37   genome <- BSgenome.Hsapiens.1000genomes.hs37d5::BSgenome.Hsapiens.1000genomes.hs37d5   grch <- \"GRCh37\" } else if(build == \"38\") {    snps <- SNPlocs.Hsapiens.dbSNP155.GRCh38::SNPlocs.Hsapiens.dbSNP155.GRCh38   genome <- BSgenome.Hsapiens.NCBI.GRCh38::BSgenome.Hsapiens.NCBI.GRCh38   grch <- \"GRCh38\" } outpath <- glue(\"~/arvhar/snp_level_annotatations/dbSNP155/{grch}\")  # IUPAC ambuigity codes, to update FASTA files from ref genome updated <-   stringr::str_split(Biostrings::IUPAC_CODE_MAP, \"\") |>   purrr::map(\\(x) stringr::str_flatten(x, collapse=\",\")) |>   purrr::map_chr(stringr::str_c) |>   purrr::set_names(names(Biostrings::IUPAC_CODE_MAP))    print(glue(\"converting data for chr {chr}\"))  tictoc::tic(glue::glue(\"finished reading in chr: {chr}\")) all_snps <- snpsBySeqname(snps, seqnames = chr, genome = genome, drop.rs.prefix=TRUE) tictoc::toc()   dt <- data.table::as.data.table(all_snps) dt <- dplyr::mutate(dt, ref_allele = updated[ref_allele], alt_alleles = updated[alt_alleles]) dt <- tidyr::separate_longer_delim(dt, ref_allele, delim =\",\")  dt <- dplyr::select(dt, CHR = seqnames, POS =pos, RSID = RefSNP_id, REF = ref_allele, ALT = alt_alleles)  # storing as integer speeds up computation later on dt <- dplyr::mutate(dt, RSID = as.integer(stringr::str_sub(start = 3, RSID)))  print(glue(\"Writing data to {outpath}\")) write_dataset(dplyr::group_by(dt, CHR), outpath)"},{"path":"http://arvidharder.com/tidyGWAS/articles/transforming_dbsnp_to_parquet.html","id":"transforming-refsnp-merged-to-parquet","dir":"Articles","previous_headings":"Converting dbSNP to .parquet files","what":"Transforming refsnp-merged to parquet","title":"get-to-know-dbsnp","text":"","code":"library(arrow) library(tidyverse)  # wget https://ftp.ncbi.nlm.nih.gov/snp/latest_release/JSON/refsnp-merged.json.bz2 ref <- read_json_arrow(\"~/refsnp-merged.json.bz2\", col_select = c(\"refsnp_id\", \"merged_snapshot_data\"))  RSID = ref$merged_snapshot_data$merged_into test <- map_chr(ref$merged_snapshot_data$merged_into, \\(x) stringr::str_flatten(x))  old_RSID = ref$refsnp_id tmp = data.frame(old_RSID, test) tmp$old_RSID = as.integer(tmp$old_RSID) tmp$test = as.integer(tmp$test)   write_parquet(tmp, \"~/part0\", compression = \"gzip\")  # write out as parquet"},{"path":"http://arvidharder.com/tidyGWAS/articles/transforming_dbsnp_to_parquet.html","id":"noteworthy-aspects-of-dbsnp155","dir":"Articles","previous_headings":"","what":"Noteworthy aspects of dbSNP155","title":"get-to-know-dbsnp","text":"dbSNP version: 155 section work progress, summarises idiosyncracies dbSNP data.","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/transforming_dbsnp_to_parquet.html","id":"issue-1---same-chrpos-can-map-to-multiple-snps","dir":"Articles","previous_headings":"Noteworthy aspects of dbSNP155","what":"Issue 1) - same CHR:POS can map to multiple SNPs","title":"get-to-know-dbsnp","text":"particular example, three SNPs merged rs10157617. check history tab however, can see merge happened dbSNP 156. - issue yet fixed data tidyGWAS using.","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/transforming_dbsnp_to_parquet.html","id":"solution","dir":"Articles","previous_headings":"Noteworthy aspects of dbSNP155 > Issue 1) - same CHR:POS can map to multiple SNPs","what":"Solution","title":"get-to-know-dbsnp","text":"case CHR:POS maps multiple RSIDs, tidyGWAS selects RSID smallest rs number, mimic dbSNP performs merges.","code":"# on GRCh38 #  CHR        POS RSID         ref_allele alt_alleles #   <chr>    <int> <chr>        <chr>      <list>      # 1 1     39491595 rs10157617   T          <chr [2]>   # 2 1     39491595 rs1638449573 T          <chr [1]>   # 3 1     39491595 rs1638449625 T          <chr [1]>   # 4 1     39491595 rs1638449683 T          <chr [1]>"},{"path":"http://arvidharder.com/tidyGWAS/articles/transforming_dbsnp_to_parquet.html","id":"some-snps-only-have-chrpos-on-grch37","dir":"Articles","previous_headings":"Noteworthy aspects of dbSNP155 > Issue 1) - same CHR:POS can map to multiple SNPs","what":"2) Some SNPs only have CHR:POS on GRCh37","title":"get-to-know-dbsnp","text":"SNPs CHR POS GRCh37, yet mapped GRCh38. tidyGWAS() simply show rows CHR POS missing, CHR_37 POS_37 !","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/transforming_dbsnp_to_parquet.html","id":"some-rsids-map-to-multiple-chrpos","dir":"Articles","previous_headings":"Noteworthy aspects of dbSNP155 > Issue 1) - same CHR:POS can map to multiple SNPs","what":"3) some RSIDs map to multiple CHR:POS","title":"get-to-know-dbsnp","text":"See NCBI discussion","code":""},{"path":"http://arvidharder.com/tidyGWAS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Arvid Harder. Maintainer.","code":""},{"path":"http://arvidharder.com/tidyGWAS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harder (2023). tidyGWAS: Quality control GWAS summary statistics. R package version 0.2.0, http://arvidharder.com/tidyGWAS/.","code":"@Manual{,   title = {tidyGWAS: Quality control for GWAS summary statistics},   author = {Arvid Harder},   year = {2023},   note = {R package version 0.2.0},   url = {http://arvidharder.com/tidyGWAS/}, }"},{"path":[]},{"path":"http://arvidharder.com/tidyGWAS/index.html","id":"standardized-and-automatic-cleaning-and-harmonization-of-gwas-summary-statistics","dir":"","previous_headings":"","what":"Standardized and automatic cleaning and harmonization of GWAS summary statistics","title":"Quality control for GWAS summary statistics","text":"typical process starting project relies GWAS summary statistics looks like : Read data access statements find downloadable link Dig readme files identify genome build exactly column names mean Manually loading sumstats R/Python/Bash, taking look identify obvious errors sumstat, format whatever format requested downstream tool using Rinse repeat next project solve issue developed R package “tidyGWAS”, automatic standardisation quality control summary statistics. See package webpage get started Detection duplicated rows (based RSID_REF_ALT CHR_POS_REF_ALT) Standardized column names Automatic updating “merged” RSIDs Detection optional removal deletions/insertions (“indels”) Automatic detection conversion CHR:POS CHR:POS:A1:A2 CHR, POS, RSID, A1 A2. Standardization CHR values (“23” -> “X”, “chr1” -> “1”) Validation standard GWAS columns, B, SE, P, N, FREQ, Z, CaseN, ControlN, A1, A2 Extremely small pvalues default converted 2.225074e-308 (minimum pvalue R) Imputation missing columns: RSID CHR:POS CHR:POS RSID. B,SE, P, Z missing possible Validation CHR:POS:RSID matching dbSNP v.155 Cleaned sumstats provided coordinates GRCh37 GRCh38, TRUE/FALSE flags indels variants multi-allelic dataset","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/detect_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Insertions/Deletions ('indels') — detect_indels","title":"Detect Insertions/Deletions ('indels') — detect_indels","text":"Indels detected examining EffectAllele OtherAllele","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/detect_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Insertions/Deletions ('indels') — detect_indels","text":"","code":"detect_indels(tbl, keep_indels, filepaths)"},{"path":"http://arvidharder.com/tidyGWAS/reference/detect_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Insertions/Deletions ('indels') — detect_indels","text":"tbl dplyr::tibble() created parse_tbl() keep_indels indels kept? filepaths list filepaths, created setup_pipeline_paths()","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/detect_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Insertions/Deletions ('indels') — detect_indels","text":"tbl","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/detect_indels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect Insertions/Deletions ('indels') — detect_indels","text":"","code":"if (FALSE) { detect_indels(sumstat, TRUE, filepaths = setup_pipeline_paths(\"testing\")) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all rows which are part of a set of duplicated rows — flag_duplicates","title":"Find all rows which are part of a set of duplicated rows — flag_duplicates","text":"Many duplication tools base::duplicated() dplyr::distinct() identify rows duplications. often useful see rows part duplication set, just second row. creates new column: dup_rsid dup_chr_pos, T/F flag. Specifically, flags rows duplication pair, just first last duplicate row, making easy work rows part duplication","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all rows which are part of a set of duplicated rows — flag_duplicates","text":"","code":"flag_duplicates(   tbl,   column = c(\"rsid\", \"chr_pos\", \"chr_pos_ref_alt\", \"rsid_ref_alt\") )"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find all rows which are part of a set of duplicated rows — flag_duplicates","text":"tbl tibble tidyGWAS_columns() column columns used form unique ID?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find all rows which are part of a set of duplicated rows — flag_duplicates","text":"tibble new columns dup_column","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find all rows which are part of a set of duplicated rows — flag_duplicates","text":"","code":"if (FALSE) {  # will tag multi-allelics as duplications flag_duplicates(tbl, column = \"rsid\") flag_duplicates(tbl, column = \"chr_pos\") # if you are interested in rows that are variant duplications flag_duplicates(tbl, column = \"rsid_ref_alt\") flag_duplicates(tbl, column = \"chr_pos_ref_alt\")  }"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect ","title":"Detect ","text":"Detect \"indels\" GWAS summary statistics","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect ","text":"","code":"flag_indels(tbl)"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect ","text":"tbl dplyr::tibble() columns EffectAllele OtherAllele","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect ","text":"dplyr::tibble() TRUE/FALSE column indel added, indel == TRUE corresponds row marked indel.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_indels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect ","text":"","code":"if (FALSE) { all_indels <-   flag_indels(tbl) |>   dplyr::filter(indels) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_invalid_rsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","title":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","text":"Detect entries valid rsID's GWAS summary statistics","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_invalid_rsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","text":"","code":"flag_invalid_rsid(tbl, regex = \"^[rR][sS]?\\\\d{1,10}$\")"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_invalid_rsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","text":"tbl dplyr::tibble() column RSID. regex regex used detect non-RSIDs","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_invalid_rsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","text":"dplyr::tibble() column invalid_rsid","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_invalid_rsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","text":"","code":"if (FALSE) { flag_invalid_rsid(tbl) |> dplyr::filter(invalid_rsid) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/infer_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer what genome build a GWAS summary statistics file is on. — infer_build","title":"Infer what genome build a GWAS summary statistics file is on. — infer_build","text":"Infer genome build GWAS summary statistics file .","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/infer_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer what genome build a GWAS summary statistics file is on. — infer_build","text":"","code":"infer_build(tbl, n_snps = 10000, dbsnp_path)"},{"path":"http://arvidharder.com/tidyGWAS/reference/infer_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer what genome build a GWAS summary statistics file is on. — infer_build","text":"tbl dplyr::tibble() column names tidyGWAS_columns() format. n_snps number snps check CHR POS dbsnp_path filepath dbSNP files .parquet format.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/infer_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer what genome build a GWAS summary statistics file is on. — infer_build","text":"either \"37\" \"38\"","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/infer_build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer what genome build a GWAS summary statistics file is on. — infer_build","text":"","code":"if (FALSE) { genome_build <- infer_build(gwas_sumstats) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/parse_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse the input data.frame or filepath to tidyGWAS — parse_tbl","title":"Parse the input data.frame or filepath to tidyGWAS — parse_tbl","text":"Parse input data.frame filepath tidyGWAS","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/parse_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse the input data.frame or filepath to tidyGWAS — parse_tbl","text":"","code":"parse_tbl(tbl, ...)"},{"path":"http://arvidharder.com/tidyGWAS/reference/parse_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse the input data.frame or filepath to tidyGWAS — parse_tbl","text":"tbl data.frame character() vector ... optional arguments passed arrow::read_delim_arrow()","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/parse_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse the input data.frame or filepath to tidyGWAS — parse_tbl","text":"dplyr::tibble()","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/parse_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse the input data.frame or filepath to tidyGWAS — parse_tbl","text":"","code":"if (FALSE) { # read in file from disk, using tab delimiter and skipping first 100 rows df <- parse_tbl(\"path/to_sumstats\", delim = \"\\t\", skip = 100) df <- parse_tbl(tibble(RSID = \"rs1001\", B = 0.01, P = 0.005, SE = 0.001, N = 100)) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove duplicated rows — remove_duplicates","title":"Remove duplicated rows — remove_duplicates","text":"remove_duplicates uses either CHR:POS:EffectAllele:OtherAllele RSID:EffectAllele:OtherAllele compute uniqueness. possible rows arranged p-value, select row smallest P.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove duplicated rows — remove_duplicates","text":"","code":"remove_duplicates(tbl, filepaths)"},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove duplicated rows — remove_duplicates","text":"tbl dplyr::tibble() created parse_tbl() filepaths list filepaths, created setup_pipeline_paths()","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove duplicated rows — remove_duplicates","text":"tbl","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove duplicated rows — remove_duplicates","text":"","code":"if (FALSE) { paths <- setup_pipeline_paths(\"testing\") df <- remove_duplicates(sumstat, paths) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_rows_with_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove rows with missing values, and write out the remowed files to disk — remove_rows_with_na","title":"Remove rows with missing values, and write out the remowed files to disk — remove_rows_with_na","text":"Remove rows missing values, write remowed files disk","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_rows_with_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove rows with missing values, and write out the remowed files to disk — remove_rows_with_na","text":"","code":"remove_rows_with_na(tbl, filepaths)"},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_rows_with_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove rows with missing values, and write out the remowed files to disk — remove_rows_with_na","text":"tbl dplyr::tibble() created parse_tbl() filepaths list filepaths, created setup_pipeline_paths()","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_rows_with_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove rows with missing values, and write out the remowed files to disk — remove_rows_with_na","text":"tbl","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_rows_with_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove rows with missing values, and write out the remowed files to disk — remove_rows_with_na","text":"","code":"if (FALSE) { df <- remove_rows_with_na(sumstat, setup_pipeline_paths(\"testing\")) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CHR and POS using RSID — repair_chr_pos","title":"Get CHR and POS using RSID — repair_chr_pos","text":"Get CHR POS using RSID","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CHR and POS using RSID — repair_chr_pos","text":"","code":"repair_chr_pos(tbl, dbsnp_path)"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CHR and POS using RSID — repair_chr_pos","text":"tbl dplyr::tibble() column names tidyGWAS_columns() format. dbsnp_path filepath dbSNP files .parquet format.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CHR and POS using RSID — repair_chr_pos","text":"dplyr::tibble() columns CHR, POS, POS_37 CHR_37 added","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get CHR and POS using RSID — repair_chr_pos","text":"","code":"if (FALSE) { sumstat_df <- repair_chr_pos(sumstat) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Use CHR and POS to get RSID from dbSNP 155 — repair_rsid","title":"Use CHR and POS to get RSID from dbSNP 155 — repair_rsid","text":"function assumes tidyGWAS column names, see tidyGWAS_columns()","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use CHR and POS to get RSID from dbSNP 155 — repair_rsid","text":"","code":"repair_rsid(tbl, build = c(\"NA\", \"37\", \"38\"), dbsnp_path)"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use CHR and POS to get RSID from dbSNP 155 — repair_rsid","text":"tbl dplyr::tibble() column names tidyGWAS_columns() format. build Genome build sumstats. 'NA' infer_build() used automatically detect build. dbsnp_path filepath dbSNP files .parquet format.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use CHR and POS to get RSID from dbSNP 155 — repair_rsid","text":"dplyr::tibble() columns CHR, POS, POS_37 CHR_37 added","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use CHR and POS to get RSID from dbSNP 155 — repair_rsid","text":"","code":"if (FALSE) { sumstat_df <- repair_rsid(sumstat, bsgenome_list) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"repair_stats() collection functions can used infer missing columns GWAS summary statistics. functions based functionality found online.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"","code":"repair_stats(tbl, verbose = FALSE)"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"tbl dplyr::tibble() column names tidyGWAS_columns() format. verbose repair_stats print masthead explaining ?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"tibble","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"","code":"if (FALSE) { updated <- repair_stats(my_gwas) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/select_correct_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove all columns that do not follow tidyGWAS naming — select_correct_columns","title":"Remove all columns that do not follow tidyGWAS naming — select_correct_columns","text":"Remove columns follow tidyGWAS naming","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/select_correct_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove all columns that do not follow tidyGWAS naming — select_correct_columns","text":"","code":"select_correct_columns(tbl, study_n, verbose = TRUE)"},{"path":"http://arvidharder.com/tidyGWAS/reference/select_correct_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove all columns that do not follow tidyGWAS naming — select_correct_columns","text":"tbl dplyr::tibble() created parse_tbl() study_n Sometimes N missing GWAS summary statistics. often much useful set study-wide N rows, instead leaving N column missing. study_n can used set N column. verbose Explain filters detail?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/select_correct_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove all columns that do not follow tidyGWAS naming — select_correct_columns","text":"dplyr::tibble(), columns following tidyGWAS_columns() naming kept","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/select_correct_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove all columns that do not follow tidyGWAS naming — select_correct_columns","text":"","code":"if (FALSE) { sumstats <- select_correct_columns(sumstats) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/setup_pipeline_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the folder structure for tidyGWAS — setup_pipeline_paths","title":"Create the folder structure for tidyGWAS — setup_pipeline_paths","text":"Create folder structure tidyGWAS","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/setup_pipeline_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the folder structure for tidyGWAS — setup_pipeline_paths","text":"","code":"setup_pipeline_paths(name)"},{"path":"http://arvidharder.com/tidyGWAS/reference/setup_pipeline_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the folder structure for tidyGWAS — setup_pipeline_paths","text":"name name output directory","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/setup_pipeline_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the folder structure for tidyGWAS — setup_pipeline_paths","text":"list filepaths","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/setup_pipeline_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the folder structure for tidyGWAS — setup_pipeline_paths","text":"","code":"setup_pipeline_paths(\"tidyGWAS_first\") #> $base #> [1] \"/tmp/RtmpStfr9S/tidyGWAS_first/tidyGWAS_first\" #>  #> $logfile #> [1] \"/tmp/RtmpStfr9S/tidyGWAS_first/tidyGWAS_first/tidyGWAS_logfile.txt\" #>  #> $cleaned #> [1] \"/tmp/RtmpStfr9S/tidyGWAS_first/tidyGWAS_first/tidyGWAS_hivestyle\" #>  #> $updated_rsid #> [1] \"/tmp/RtmpStfr9S/tidyGWAS_first/tidyGWAS_first/pipeline_info/updated_rsid.parquet\" #>  #> $failed_rsid_parse #> [1] \"/tmp/RtmpStfr9S/tidyGWAS_first/tidyGWAS_first/pipeline_info/removed_failed_rsid_parse.parquet\" #>  #> $removed_rows #> [1] \"/tmp/RtmpStfr9S/tidyGWAS_first/tidyGWAS_first/pipeline_info/removed_rows_\" #>"},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":null,"dir":"Reference","previous_headings":"","what":"PGC3 schizophrenia GWAS — test_file","title":"PGC3 schizophrenia GWAS — test_file","text":"subset data Psychiatics Genonomics Consortium GWAS schizophrenia (european subset)","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PGC3 schizophrenia GWAS — test_file","text":"","code":"test_file"},{"path":[]},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":"test-file","dir":"Reference","previous_headings":"","what":"test_file","title":"PGC3 schizophrenia GWAS — test_file","text":"data frame 100,000 rows 12 columns: CHR Chromosome POS Genomic position RSID rsID dbSNP EffecttAllele allele correspods effect, B OtherAllelle Non-effect allele B Effect, Beta SE Standard error B EAF EffectAllele Frequency, frequency EffectAllele INFO Imputation accuracy P Pvalue CaseN Number cases ControlN Number controls","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PGC3 schizophrenia GWAS — test_file","text":"https://figshare.com/ndownloader/files/34517828","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","title":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","text":"tidyGWAS() performs set validations input colummns, repairs missing columns, can add missing CHR/POS RSID. addition, CHR POS standardised GRCh38, coordinates GRCh37 added well. Briefly, tidyGWAS() updates RSID possible using refsnp-merged file dbSNP. inputed column validated coerced correct type. Missing CHR/POS RSID detected imputed using repair_rsid() repair_chr_pos(). RSID CHR:POS present, verify_chr_pos_rsid() executed check dbSNP CHR:POS:RSID agrees CHR:POS:RSID tbl. statistis P, B missing, tidyGWAS() attempt impute possible using repair_stats() Standard column names assumed, inputting function. deliberate decision, automatic parsing important column names can ambigious example, sumstats, A1 referes effect allele, formats use A1 non-effect allele. tidyGWAS_columns() can used standardise column names, see standard format.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","text":"","code":"tidyGWAS(   tbl,   ...,   dbsnp_path,   output_format = c(\"csv\", \"hivestyle\", \"parquet\"),   build = c(\"NA\", \"37\", \"38\"),   outdir = tempdir(),   study_n,   convert_p = 2.225074e-308,   name = stringr::str_replace_all(date(), pattern = c(` ` = \"_\", `:` = \"_\")),   keep_indels = TRUE,   repair_cols = TRUE,   logfile = FALSE,   log_on_err = \"tidyGWAS_logfile.txt\",   verbose = FALSE )"},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","text":"tbl data.frame character() vector ... pass additional arguments arrow::read_delim_arrow() function called tbl filepath possible arguments study_n set N, build set genome build. dbsnp_path filepath dbSNP155 directory (untarred dbSNP155.tar) output_format finished cleaned file saved? \"csv\" corresponds arrow::write_csv_arrow() 'hivestyle' corresponds arrow::write_dataset() split CHR 'parquet' corresponds arrow::write_parquet() build Can used skip infer_build() outdir results saved succesful execution? study_n Sometimes N missing GWAS summary statistics. often much useful set study-wide N rows, instead leaving N column missing. study_n can used set N column. convert_p value used P = 0? name name output directory keep_indels indels kept? repair_cols missing columns repaired? logfile messages redirected logfile? log_on_err Optional. Can pass filepath copy logfile function exists. verbose Explain filters detail?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","text":"tibble NULL, depending outdir","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","text":"","code":"if (FALSE) { tidyGWAS(tbl = \"my_dataframe\", logfile = \"true\", name = \"test_run\", outdir = \"gwas_sumstat_dir\") }"},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dplyr::tibble() with tidyGWAS column names — tidyGWAS_columns","title":"Create a dplyr::tibble() with tidyGWAS column names — tidyGWAS_columns","text":"tidyGWAS functions assumes fixed column names. function facilitates renaming column tidyGWAS format.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dplyr::tibble() with tidyGWAS column names — tidyGWAS_columns","text":"","code":"tidyGWAS_columns(   tbl,   CHR = \"CHR\",   POS = \"POS\",   RSID = \"RSID\",   EffectAllele = \"EffectAllele\",   OtherAllele = \"OtherAllele\",   B = \"B\",   SE = \"SE\",   P = \"P\",   EAF = \"EAF\",   N = \"N\",   CaseN = \"CaseN\",   ControlN = \"ControlN\",   INFO = \"INFO\",   Z = \"Z\",   OR = \"OR\" )"},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dplyr::tibble() with tidyGWAS column names — tidyGWAS_columns","text":"tbl dplyr::tibble() something coercible one CHR chromosome POS position RSID rsID dbSNP EffectAllele allele corresponding effect, B OtherAllele non-effect allele B Beta, effect, SE standard error P p value EAF effect-allele frequency N total sample size (case + control) CaseN number cases (case-control phenotypes) ControlN number controls (case-control phenotypes) INFO INFO score, imputation accuracy Z Z score odds-ratio","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dplyr::tibble() with tidyGWAS column names — tidyGWAS_columns","text":"tibble changes column names","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dplyr::tibble() with tidyGWAS column names — tidyGWAS_columns","text":"","code":"wrong_format <- dplyr::tibble(CHROM = 1, bp = 1000, A1 = \"C\", A2 = \"A\", Effect = 0.05) formatted <- tidyGWAS_columns( wrong_format, CHR = \"CHROM\", POS = \"bp\", EffectAllele = \"A1\", OtherAllele = \"A2\", B = \"Effect\" )"},{"path":"http://arvidharder.com/tidyGWAS/reference/update_rsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Update rsIDs from dbSNP that have been merged into other RSIDs — update_rsid","title":"Update rsIDs from dbSNP that have been merged into other RSIDs — update_rsid","text":"Update rsIDs dbSNP merged RSIDs","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/update_rsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update rsIDs from dbSNP that have been merged into other RSIDs — update_rsid","text":"","code":"update_rsid(tbl, filepaths, dbsnp_path)"},{"path":"http://arvidharder.com/tidyGWAS/reference/update_rsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update rsIDs from dbSNP that have been merged into other RSIDs — update_rsid","text":"tbl dplyr::tibble() created parse_tbl() filepaths list filepaths, created setup_pipeline_paths() dbsnp_path filepath dbSNP155 directory","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/update_rsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update rsIDs from dbSNP that have been merged into other RSIDs — update_rsid","text":"tbl","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/update_rsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update rsIDs from dbSNP that have been merged into other RSIDs — update_rsid","text":"","code":"if (FALSE) { update_rsid(sumstat, filepaths = setup_pipeline_paths(\"testing\"), dbsnp_path = \"~/dbSNP155\") }"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that values in GWAS summary statistics columns are correct — validate_columns","title":"Check that values in GWAS summary statistics columns are correct — validate_columns","text":"validate_columns() remove rows, adds TRUE/FALSE flag specified column.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that values in GWAS summary statistics columns are correct — validate_columns","text":"","code":"validate_columns(   tbl,   col = c(\"B\", \"SE\", \"EAF\", \"N\", \"Z\", \"P\", \"POS\", \"CHR\", \"EffectAllele\", \"OtherAllele\"),   verbose = TRUE,   convert_p = 2.225074e-308 )"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that values in GWAS summary statistics columns are correct — validate_columns","text":"tbl dplyr::tibble() created parse_tbl() col column check values ? verbose Explain filters detail? convert_p value used P = 0?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that values in GWAS summary statistics columns are correct — validate_columns","text":"dplyr::tibble(), column added named invalid_col. validate \"B\" column, validate_columns add TRUE/FALSE column named invalid_B input tibble.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that values in GWAS summary statistics columns are correct — validate_columns","text":"","code":"if (FALSE) { gwas_file <- validate_columns(  tbl = gwas_file,  col = \"B\",  verbose = FALSE,  # if you want to keep 0 pvalues as 0.  convert_p = 0 ) dplyr::filter(gwas_file, invalid_P) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_rsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate format of the RSID column in a GWAS summary statistics file — validate_rsid","title":"Validate format of the RSID column in a GWAS summary statistics file — validate_rsid","text":"Validate format RSID column GWAS summary statistics file","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_rsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate format of the RSID column in a GWAS summary statistics file — validate_rsid","text":"","code":"validate_rsid(tbl, verbose = FALSE, outpath)"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_rsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate format of the RSID column in a GWAS summary statistics file — validate_rsid","text":"tbl dplyr::tibble() created parse_tbl() verbose Explain filters detail? outpath Filepath: write rows invalid RSID?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_rsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate format of the RSID column in a GWAS summary statistics file — validate_rsid","text":"tbl","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_rsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate format of the RSID column in a GWAS summary statistics file — validate_rsid","text":"","code":"if (FALSE) { validate_rsid(sumstat, \"~/invalid_rsid.parquet\") }"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_sumstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate statistics columns in a GWAS summary statistics file — validate_sumstat","title":"Validate statistics columns in a GWAS summary statistics file — validate_sumstat","text":"Validate statistics columns GWAS summary statistics file","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_sumstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate statistics columns in a GWAS summary statistics file — validate_sumstat","text":"","code":"validate_sumstat(   tbl,   remove_cols = c(\"\"),   filter_func,   verbose = FALSE,   convert_p,   id )"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_sumstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate statistics columns in a GWAS summary statistics file — validate_sumstat","text":"tbl dplyr::tibble() created parse_tbl() remove_cols Columns validated filter_func handles reporting writing removed files disk verbose Explain filters detail? convert_p value used P = 0? id Used customize messages.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_sumstat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate statistics columns in a GWAS summary statistics file — validate_sumstat","text":"tbl","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_sumstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate statistics columns in a GWAS summary statistics file — validate_sumstat","text":"","code":"if (FALSE) { validate_sumstat(sumstat, remove_cols = \"EffectAllele\", convert_p = 0) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_with_dbsnp.html","id":null,"dir":"Reference","previous_headings":"","what":"Update CHR/POS/RSID/EffectAllele/OtherAllele for GWAS sumstats using dbSNP — validate_with_dbsnp","title":"Update CHR/POS/RSID/EffectAllele/OtherAllele for GWAS sumstats using dbSNP — validate_with_dbsnp","text":"Update CHR/POS/RSID/EffectAllele/OtherAllele GWAS sumstats using dbSNP","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_with_dbsnp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update CHR/POS/RSID/EffectAllele/OtherAllele for GWAS sumstats using dbSNP — validate_with_dbsnp","text":"","code":"validate_with_dbsnp(tbl, build = c(\"NA\", \"37\", \"38\"), dbsnp_path, filter_func)"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_with_dbsnp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update CHR/POS/RSID/EffectAllele/OtherAllele for GWAS sumstats using dbSNP — validate_with_dbsnp","text":"tbl dplyr::tibble() column names tidyGWAS_columns() format. build Genome build sumstats. 'NA' infer_build() used automatically detect build. dbsnp_path filepath dbSNP files .parquet format. filter_func function applied tibble exiting. used write disk rows removed.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_with_dbsnp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update CHR/POS/RSID/EffectAllele/OtherAllele for GWAS sumstats using dbSNP — validate_with_dbsnp","text":"dplyr::tibble()","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_with_dbsnp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update CHR/POS/RSID/EffectAllele/OtherAllele for GWAS sumstats using dbSNP — validate_with_dbsnp","text":"","code":"if (FALSE) {  validate_with_dbsnp(sumstats, build = \"NA\", dbsnp_path = \"/dbsnp155/dbsnp\") }"},{"path":"http://arvidharder.com/tidyGWAS/reference/verify_chr_pos_rsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare CHR, POS and RSID with dbSNP reference data — verify_chr_pos_rsid","title":"Compare CHR, POS and RSID with dbSNP reference data — verify_chr_pos_rsid","text":"Compare CHR, POS RSID dbSNP reference data","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/verify_chr_pos_rsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare CHR, POS and RSID with dbSNP reference data — verify_chr_pos_rsid","text":"","code":"verify_chr_pos_rsid(tbl, build = c(\"NA\", \"37\", \"38\"), dbsnp_path)"},{"path":"http://arvidharder.com/tidyGWAS/reference/verify_chr_pos_rsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare CHR, POS and RSID with dbSNP reference data — verify_chr_pos_rsid","text":"tbl data.frame character() vector build Can used skip infer_build() dbsnp_path filepath dbSNP155 directory (untarred dbSNP155.tar)","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/verify_chr_pos_rsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare CHR, POS and RSID with dbSNP reference data — verify_chr_pos_rsid","text":"dplyr::tibble() columns CHR, POS, POS_37 CHR_37 added","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/verify_chr_pos_rsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare CHR, POS and RSID with dbSNP reference data — verify_chr_pos_rsid","text":"","code":"if (FALSE) { gwas <- tidyGWAS::test_file # make_callback can be passed a filepath to write out removed rows to. callback <- make_callback(\"~/output_folder/verify_chr_pos_rsid_removed_rows.tsv\") verify_chr_pos_rsid(gwas, bs, build = 37) }"}]
