[{"path":"http://arvidharder.com/tidyGWAS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tidyGWAS authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/get-to-know-dbsnp.html","id":"issue-1---same-chrpos-can-map-to-multiple-snps","dir":"Articles","previous_headings":"","what":"Issue 1) - same CHR:POS can map to multiple SNPs","title":"get-to-know-dbsnp","text":"particular example, three SNPs merged rs10157617. check history tab however, can see merge happened dbSNP 156. - issue yet fixed data tidyGWAS using.","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/get-to-know-dbsnp.html","id":"solution","dir":"Articles","previous_headings":"Issue 1) - same CHR:POS can map to multiple SNPs","what":"Solution","title":"get-to-know-dbsnp","text":"case CHR:POS maps multiple RSIDs, tidyGWAS selects RSID smallest rs number, mimic dbSNP performs merges.","code":"# on GRCh38 #  CHR        POS RSID         ref_allele alt_alleles #   <chr>    <int> <chr>        <chr>      <list>      # 1 1     39491595 rs10157617   T          <chr [2]>   # 2 1     39491595 rs1638449573 T          <chr [1]>   # 3 1     39491595 rs1638449625 T          <chr [1]>   # 4 1     39491595 rs1638449683 T          <chr [1]>"},{"path":"http://arvidharder.com/tidyGWAS/articles/get-to-know-dbsnp.html","id":"some-snps-only-have-chrpos-on-grch37","dir":"Articles","previous_headings":"","what":"2) Some SNPs only have CHR:POS on GRCh37","title":"get-to-know-dbsnp","text":"SNPs CHR POS GRCh37, yet mapped GRCh38. SNPs, CHR POS NA, CHR_37 POS_37 available.","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/get-to-know-dbsnp.html","id":"some-rsids-map-to-multiple-chrpos","dir":"Articles","previous_headings":"","what":"3) some RSIDs map to multiple CHR:POS","title":"get-to-know-dbsnp","text":"See NCBI discussion","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"downloaded-reference-files","dir":"Articles","previous_headings":"","what":"Downloaded reference files","title":"tidyGWAS","text":"tidyGWAS uses version dbSNP transformed parquet files, needed perform validation reparation CHR, POS RSID. files can downloaded :https://drive.google.com/drive/folders/1ZcwnQtwWC476a5OiAYfSR2qCX6PiqhV3","code":"googledrive::drive_deauth() file_id <- googledrive::as_id(\"1hg6jxQUj6UmEdLIH46md7eJcgfVlzmNn\") googledrive::drive_download(file_id) DIRPATH = \"dbsnp155\" tar -xvf dbSNP155.tar $DIRPATH"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"tidyGWAS","text":"GWAS summary statistics file can provided -memory data.frame/tibble filepath can read data.table::fread. use 100k random rows PGC wave 3 schizophrenia GWAS example file. , column names already renamed correct format.","code":"devtools::install_github(\"ararder/tidyGWAS\") # or remotes::install_github(\"ararder/tidyGWAS\") example_file <- dplyr::tibble(tidyGWAS::test_file) example_file #> # A tibble: 100,000 × 12 #>      CHR       POS RSID     EffectAllele OtherAllele        B     SE   EAF  INFO #>    <int>     <int> <chr>    <chr>        <chr>          <dbl>  <dbl> <dbl> <dbl> #>  1     6  31819813 rs18398… C            G           -0.00570 0.0292 0.975 0.936 #>  2    16  13991338 rs80444… T            C           -0.0177  0.0092 0.641 0.951 #>  3     9  85016930 rs11140… A            T           -0.00230 0.0185 0.916 0.701 #>  4    19  15743403 rs48079… C            G            0.00240 0.0099 0.256 0.996 #>  5    18   5948313 rs948293 T            C            0.00170 0.0092 0.332 0.971 #>  6    13  47224772 rs837    G            A            0.0272  0.0086 0.447 1.01  #>  7    10  23782010 rs79100… A            T           -0.0226  0.0091 0.666 0.995 #>  8    12  14061867 rs99718… A            T            0.00780 0.009  0.641 0.999 #>  9     7  57393801 rs48706… A            G           -0.00800 0.0097 0.703 0.942 #> 10     2 222786280 rs824920 T            G            0.00210 0.012  0.150 0.996 #> # ℹ 99,990 more rows #> # ℹ 3 more variables: P <dbl>, CaseN <int>, ControlN <int>"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"creating-the-correct-column-names","dir":"Articles","previous_headings":"Quick start","what":"Creating the correct column names","title":"tidyGWAS","text":"input file column names correct format, can use tidyGWAS_columns()` first rename columns correct format. can also useful tidyGWAS_columns() drop columns matching correct format, can quickly identify mislabelled columns","code":"# what if we have a file where POS was named bp, and B was named BETA? # tidyGWAS will not recognize these as valid column names and would drop them. wrong_colnames <- rename(example_file, bp = POS, BETA = B)  # we can use tidyGWAS_columns to specify current names: correct_names <- tidyGWAS_columns(   # first argument is the data.frame   tbl = wrong_colnames,    # then any column which is not correctly named:   POS = \"bp\",   B = \"BETA\"   )  correct_names #> # A tibble: 100,000 × 12 #>      CHR       POS RSID   EffectAllele OtherAllele        B     SE       P   EAF #>    <int>     <int> <chr>  <chr>        <chr>          <dbl>  <dbl>   <dbl> <dbl> #>  1     6  31819813 rs183… C            G           -0.00570 0.0292 0.844   0.975 #>  2    16  13991338 rs804… T            C           -0.0177  0.0092 0.0532  0.641 #>  3     9  85016930 rs111… A            T           -0.00230 0.0185 0.900   0.916 #>  4    19  15743403 rs480… C            G            0.00240 0.0099 0.807   0.256 #>  5    18   5948313 rs948… T            C            0.00170 0.0092 0.858   0.332 #>  6    13  47224772 rs837  G            A            0.0272  0.0086 0.00159 0.447 #>  7    10  23782010 rs791… A            T           -0.0226  0.0091 0.0133  0.666 #>  8    12  14061867 rs997… A            T            0.00780 0.009  0.384   0.641 #>  9     7  57393801 rs487… A            G           -0.00800 0.0097 0.413   0.703 #> 10     2 222786280 rs824… T            G            0.00210 0.012  0.860   0.150 #> # ℹ 99,990 more rows #> # ℹ 3 more variables: CaseN <int>, ControlN <int>, INFO <dbl>"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"running-tidygwas","dir":"Articles","previous_headings":"","what":"Running tidyGWAS","title":"tidyGWAS","text":"tidyGWAS requires one mandatory argument: tbl , either data.frame, filepath can run tidyGWAS without dbSNP filtering. substantially quicker. default, outputted files stored tempdir(). can add outdir = \"filepath/to_dir/\" automatically copy files finished execution. tidyGWAS find rows removed. removed rows RSID coded CHR:POS:REF:ALT. Normally, RSID repaired using dbSNP, since passed use_dbnp = FALSE, rows instead dropped.","code":"# input the filepath where you untarred the downloaded reference files path_to_dbsnp = \"\" tidyGWAS(correct_names, dbsnp_path = path_to_dbsnp) my_outdir <- paste0(tempdir(), \"all_my_gwas_sumstats\", sep = \"/\")  # We can also add logfile = TRUE to save output to a logfile tidyGWAS(correct_names, use_dbsnp = FALSE, outdir = my_outdir, logfile = TRUE, dbsnp_path = path_to_dbsnp)"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"computational-cost","dir":"Articles","previous_headings":"","what":"Computational cost","title":"tidyGWAS","text":"Memory use time scales size summary statistics. running tidyGWAS extensively, ’s estimation time memory: 1 - 10 mil rows: <16gb memory, ~20 min  tidyGWAS exposes several smaller functions can help interactively working sumstats.","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"getting-b-and-se-from-z-n-and-eaf","dir":"Articles","previous_headings":"Computational cost","what":"Getting B and SE from Z, N and EAF","title":"tidyGWAS","text":"repair_stats() can used add missing statistics column, P, Z, B SE, depending columns exist. Note ","code":"example_file <- dplyr::tibble(test_file) # Has Z , EAF and N, but not B and SE (Which are commonly used for PRS) tmp <- dplyr::mutate(example_file, Z = B/SE, N = CaseN + ControlN) |>    dplyr::select(-B, -SE) repaired <- repair_stats(tmp) #>  #> ── Repairing missing statistics columns: #> 1. Transform OR to B if OR exists #> 2. Remove OR if both OR and B exists #> 3. Impute Z based on B and SE if both B and SE exist and Z is missing #> 4. Impute Z based on P and B if Z and SE is missing #> 5. Impute B and SE if both are missing, and Z, EAF and N is present #>  #> ── Starting reparations: #> ℹ Imputing B and SE, using Z, EAF and N . The B and SE will correspond to a standardized scale, which might not always be the same scale that the original betas was on. #>  #> ── Finished repair_stats: #> ℹ Added 2 new columns: B and SE  # the Betas will be on a standardized scale, and can therefore be different # than what was initially there dplyr::inner_join(example_file, repaired,by = \"RSID\") |> dplyr::select(B.x, B.y) |>    dplyr::summarise(cor(B.x, B.y)) #> # A tibble: 1 × 1 #>   `cor(B.x, B.y)` #>             <dbl> #> 1           0.996   # Getting Z, if you only have B and P tmp <-  dplyr::select(example_file,  -SE) |>    repair_stats() #>  #> ── Repairing missing statistics columns: #> 1. Transform OR to B if OR exists #> 2. Remove OR if both OR and B exists #> 3. Impute Z based on B and SE if both B and SE exist and Z is missing #> 4. Impute Z based on P and B if Z and SE is missing #> 5. Impute B and SE if both are missing, and Z, EAF and N is present #>  #> ── Starting reparations: #> ℹ Found B and P but not Z. Imputing Z using: #> sign(beta) * sqrt(stats::qchisq(pvalue,1,lower=FALSE)) #>  #> ── Finished repair_stats: #> ℹ Added 1 new columns: Z"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"identifying-incorrect-rsids","dir":"Articles","previous_headings":"Computational cost","what":"Identifying incorrect RSIDs","title":"tidyGWAS","text":"uses regex identify non RrSs rows.","code":"flag_invalid_rsid(example_file) |>    dplyr::filter(invalid_rsid)"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"a-fast-function-for-finding-all-entries-in-a-duplication","dir":"Articles","previous_headings":"Computational cost","what":"A fast function for finding all entries in a duplication","title":"tidyGWAS","text":"","code":"flag_duplicates(example_file, column = \"rsid\") #> # A tibble: 100,000 × 13 #>      CHR       POS RSID     EffectAllele OtherAllele        B     SE   EAF  INFO #>    <int>     <int> <chr>    <chr>        <chr>          <dbl>  <dbl> <dbl> <dbl> #>  1     6  31819813 rs18398… C            G           -0.00570 0.0292 0.975 0.936 #>  2    16  13991338 rs80444… T            C           -0.0177  0.0092 0.641 0.951 #>  3     9  85016930 rs11140… A            T           -0.00230 0.0185 0.916 0.701 #>  4    19  15743403 rs48079… C            G            0.00240 0.0099 0.256 0.996 #>  5    18   5948313 rs948293 T            C            0.00170 0.0092 0.332 0.971 #>  6    13  47224772 rs837    G            A            0.0272  0.0086 0.447 1.01  #>  7    10  23782010 rs79100… A            T           -0.0226  0.0091 0.666 0.995 #>  8    12  14061867 rs99718… A            T            0.00780 0.009  0.641 0.999 #>  9     7  57393801 rs48706… A            G           -0.00800 0.0097 0.703 0.942 #> 10     2 222786280 rs824920 T            G            0.00210 0.012  0.150 0.996 #> # ℹ 99,990 more rows #> # ℹ 4 more variables: P <dbl>, CaseN <int>, ControlN <int>, dup_rsid <lgl> # or  flag_duplicates(example_file, column = \"chr_pos\") #> # A tibble: 100,000 × 13 #>      CHR       POS RSID     EffectAllele OtherAllele        B     SE   EAF  INFO #>    <int>     <int> <chr>    <chr>        <chr>          <dbl>  <dbl> <dbl> <dbl> #>  1     6  31819813 rs18398… C            G           -0.00570 0.0292 0.975 0.936 #>  2    16  13991338 rs80444… T            C           -0.0177  0.0092 0.641 0.951 #>  3     9  85016930 rs11140… A            T           -0.00230 0.0185 0.916 0.701 #>  4    19  15743403 rs48079… C            G            0.00240 0.0099 0.256 0.996 #>  5    18   5948313 rs948293 T            C            0.00170 0.0092 0.332 0.971 #>  6    13  47224772 rs837    G            A            0.0272  0.0086 0.447 1.01  #>  7    10  23782010 rs79100… A            T           -0.0226  0.0091 0.666 0.995 #>  8    12  14061867 rs99718… A            T            0.00780 0.009  0.641 0.999 #>  9     7  57393801 rs48706… A            G           -0.00800 0.0097 0.703 0.942 #> 10     2 222786280 rs824920 T            G            0.00210 0.012  0.150 0.996 #> # ℹ 99,990 more rows #> # ℹ 4 more variables: P <dbl>, CaseN <int>, ControlN <int>, dup_chr_pos <lgl>"},{"path":"http://arvidharder.com/tidyGWAS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Arvid Harder. Maintainer.","code":""},{"path":"http://arvidharder.com/tidyGWAS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harder (2023). tidyGWAS: Quality control GWAS summary statistics. R package version 0.2.0, http://arvidharder.com/tidyGWAS/.","code":"@Manual{,   title = {tidyGWAS: Quality control for GWAS summary statistics},   author = {Arvid Harder},   year = {2023},   note = {R package version 0.2.0},   url = {http://arvidharder.com/tidyGWAS/}, }"},{"path":"http://arvidharder.com/tidyGWAS/index.html","id":"tidygwas","dir":"","previous_headings":"","what":"Quality control for GWAS summary statistics","title":"Quality control for GWAS summary statistics","text":"goal tidyGWAS provide easy-use R package written typical tidyverse/dplyr syntax make cleaning collection sumstats simple, stop analysts falling common error. addition provide helpers standardise GWAS data: Reparation stats columns possible (missing B/SE/P), well default providing coordinates GRCh37 GRCh38. early design goal tidyGWAS keep many rows possible. default options therefore keep multi-allelic SNPs ambigious SNPs, suggest handle depending downstream analysis tool wish use.","code":""},{"path":"http://arvidharder.com/tidyGWAS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Quality control for GWAS summary statistics","text":"can install development version tidyGWAS GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"Ararder/tidyGWAS\") # and then download the following file # from google drive: https://drive.google.com/file/d/1hg6jxQUj6UmEdLIH46md7eJcgfVlzmNn/view?usp=share_link # which contains dbSNP 155 for GRCh37 and GRCH38 in parquet format"},{"path":"http://arvidharder.com/tidyGWAS/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Quality control for GWAS summary statistics","text":"see vignette","code":"library(tidyGWAS) dbsnp_file <-  \"filepath/to/untarred/dnsnp155\" raw_sumstats <- \"filepath/to/raw_sumstats.csv\"  cleaned <- tidyGWAS(   tbl = raw_sumstats,   dbsnp_files = \"filepath/to/raw_sumstats.csv\",   output_format = \"parquet\",   name = \"my_GWAS\" )"},{"path":"http://arvidharder.com/tidyGWAS/index.html","id":"what-does-tidygwas-do","dir":"","previous_headings":"","what":"What does tidyGWAS do?","title":"Quality control for GWAS summary statistics","text":"Remove rows NAs Handles duplicates across CHR:POS:REF:ALT RSID:REF:ALT. Note remove multi-allelics Can detect remove indels. Control using keep_indels Update RSIDs merged newer ones, using RsMergeArch Check RSID follows correct format. Check CHR:POS CHR:POS:REF:ALT invalid RSIDs, automatic parsing format Reparation RSID rows invalid RSID, format CHR:POS CHR:POS:REF:ALT Validation CHR POS, automatic conversion common CHR formats ‘X’, ‘M’, ‘MT’ ‘23’, “chr6” “6”. Validation statistics columns: B, Z, SE, P, N, EAF. See stats_validation Validation CHR, POS RSID columns. Identify rows inconsistent CHR, POS RSID combination. Repair missing CHR/POS RSID, RSID CHR:POS. Remove rows alleles dont match possible alleles dbSNP Remove RSIDs dbSNP Add CHR POS GRCh37 GRCh38","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all rows which are part of a set of duplicated rows — flag_duplicates","title":"Find all rows which are part of a set of duplicated rows — flag_duplicates","text":"Many duplication tools [base::duplicated()] [dplyr::distinct()] identify rows duplications. often useful see rows part duplication set, just second row. creates new column: `dup_rsid` `dup_chr_pos`, T/F flag. Specifically, flags rows duplication pair, just first last duplicate row, making easy work rows part duplication","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all rows which are part of a set of duplicated rows — flag_duplicates","text":"","code":"flag_duplicates(   tbl,   column = c(\"rsid\", \"chr_pos\", \"chr_pos_ref_alt\", \"rsid_ref_alt\") )"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find all rows which are part of a set of duplicated rows — flag_duplicates","text":"tbl tibble [tidyGWAS_columns()] column columns used form unique ID?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find all rows which are part of a set of duplicated rows — flag_duplicates","text":"tibble new columns dup_column","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find all rows which are part of a set of duplicated rows — flag_duplicates","text":"","code":"if (FALSE) {  # will tag multi-allelics as duplications flag_duplicates(tbl, column = \"rsid\") flag_duplicates(tbl, column = \"chr_pos\") # if you are interested in rows that are variant duplications flag_duplicates(tbl, column = \"rsid_ref_alt\") flag_duplicates(tbl, column = \"chr_pos_ref_alt\")  }"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect ","title":"Detect ","text":"Detect \"indels\" GWAS summary statistics","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect ","text":"","code":"flag_indels(tbl)"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect ","text":"tbl [dplyr::tibble()] columns `EffectAllele` `OtherAllele`","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect ","text":"[dplyr::tibble()] TRUE/FALSE column `indel` added, indel == TRUE corresponds row marked indel.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_indels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect ","text":"","code":"if (FALSE) { all_indels <-   flag_indels(tbl) |>   dplyr::filter(indels) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_invalid_rsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","title":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","text":"Detect entries valid rsID's GWAS summary statistics","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_invalid_rsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","text":"","code":"flag_invalid_rsid(tbl, regex = \"^[rR][sS]?\\\\d{1,10}$\")"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_invalid_rsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","text":"tbl [dplyr::tibble()] column `RSID`. regex regex used detect non-RSIDs","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_invalid_rsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","text":"[dplyr::tibble()] column `invalid_rsid`","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_invalid_rsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","text":"","code":"if (FALSE) { flag_invalid_rsid(tbl) |> dplyr::filter(invalid_rsid) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/infer_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer what genome build a GWAS summary statistics file is on. — infer_build","title":"Infer what genome build a GWAS summary statistics file is on. — infer_build","text":"Infer genome build GWAS summary statistics file .","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/infer_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer what genome build a GWAS summary statistics file is on. — infer_build","text":"","code":"infer_build(sumstat, n_snps = 10000)"},{"path":"http://arvidharder.com/tidyGWAS/reference/infer_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer what genome build a GWAS summary statistics file is on. — infer_build","text":"sumstat data.frame columns \"CHR\" \"POS\" n_snps number snps check CHR POS ","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/infer_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer what genome build a GWAS summary statistics file is on. — infer_build","text":"either `\"37\"` `\"38\"`","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/infer_build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer what genome build a GWAS summary statistics file is on. — infer_build","text":"","code":"if (FALSE) { genome_build <- infer_build(gwas_sumstats) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CHR and POS using RSID — repair_chr_pos","title":"Get CHR and POS using RSID — repair_chr_pos","text":"Get CHR POS using RSID","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CHR and POS using RSID — repair_chr_pos","text":"","code":"repair_chr_pos(sumstat)"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CHR and POS using RSID — repair_chr_pos","text":"sumstat dplyr::tibble atleast RSID, EffectAllele OtherAllele","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CHR and POS using RSID — repair_chr_pos","text":"tibble","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get CHR and POS using RSID — repair_chr_pos","text":"","code":"if (FALSE) { sumstat_df <- repair_chr_pos(sumstat) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Use CHR and POS to get RSID from dbSNP 155 — repair_rsid","title":"Use CHR and POS to get RSID from dbSNP 155 — repair_rsid","text":"function assumes tidyGWAS column names, see [tidyGWAS_columns()]","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use CHR and POS to get RSID from dbSNP 155 — repair_rsid","text":"","code":"repair_rsid(sumstat, build = c(\"NA\", \"37\", \"38\"))"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use CHR and POS to get RSID from dbSNP 155 — repair_rsid","text":"sumstat tibble CHR,POS, EffectAllele OtherAllele build Optional. Genome build, either NA, 37 38. NA, [infer_build()] called get genome build.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use CHR and POS to get RSID from dbSNP 155 — repair_rsid","text":"tibble","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use CHR and POS to get RSID from dbSNP 155 — repair_rsid","text":"","code":"if (FALSE) { sumstat_df <- repair_rsid(sumstat, bsgenome_list) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"`repair_stats()` collection functions can used infer missing columns GWAS summary statistics. functions based functionality found online.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"","code":"repair_stats(tbl)"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"tbl [dplyr::tibble()] [tidyGWAS_columns()] columns","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"tibble","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"","code":"if (FALSE) { updated <- repair_stats(my_gwas) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":null,"dir":"Reference","previous_headings":"","what":"PGC3 schizophrenia GWAS — test_file","title":"PGC3 schizophrenia GWAS — test_file","text":"subset data Psychiatics Genonomics Consortium GWAS schizophrenia (european subset)","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PGC3 schizophrenia GWAS — test_file","text":"","code":"test_file"},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PGC3 schizophrenia GWAS — test_file","text":"## `test_file` data frame 100,000 rows 12 columns: CHR Chromosome POS Genomic position RSID rsID dbSNP EffecttAllele allele correspods effect, B OtherAllelle Non-effect allele B Effect, Beta SE Standard error B EAF EffectAllele Frequency, frequency EffectAllele INFO Imputation accuracy P Pvalue CaseN Number cases ControlN Number controls","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PGC3 schizophrenia GWAS — test_file","text":"<https://figshare.com/ndownloader/files/34517828>","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","title":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","text":"`tidyGWAS()` performs set validations input colummns, repairs missing columns, can add missing CHR/POS RSID. addition, CHR POS standardised GRCh38, coordinates GRCh37 added well. Briefly, `tidyGWAS()` updates RSID possible using RsMergeArch file dbSNP. inputed column validated coerced correct type. Missing CHR/POS RSID detected imputed using [repair_rsid()] [repair_chr_pos()]. RSID CHR:POS present, [verify_chr_pos_rsid()] executed check dbSNP CHR:POS:RSID agrees CHR:POS:RSID `tbl`. statistis `P`, `B` missing, `tidyGWAS()` attempt impute possible using [repair_stats()] Standard column names assumed, inputting function. deliberate decision, automatic parsing important column names can ambigious example, sumstats, A1 referes effect allele, formats use A1 non-effect allele. [tidyGWAS_columns()] can used standardise column names, see standard format.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","text":"","code":"tidyGWAS(   tbl,   ...,   dbsnp_path = \"\",   output_format = c(\"csv\", \"hivestyle\", \"parquet\"),   build = c(\"NA\", \"37\", \"38\"),   outdir = tempdir(),   convert_p = 2.225074e-308,   name = stringr::str_replace_all(date(), pattern = c(` ` = \"_\", `:` = \"_\")),   use_dbsnp = TRUE,   keep_indels = TRUE,   repair_cols = TRUE,   implementation = c(\"arrow\", \"bsgenome\"),   logfile = FALSE,   log_on_err = \"tidyGWAS_logfile.txt\",   verbose = FALSE )"},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","text":"tbl `data.frame` `character()` vector ... pass arguments [arrow::read_delim_arrow()] function called tbl filepath possible arguments `study_n` set N, `build` set genome build. dbsnp_path filepath dbSNP155 directory (untarred dbSNP155.tar) output_format finished cleaned file saved? Can either [arrow::write_dataset()]  hivestyle partitioning chromosome, [arrow::write_parquet()] parquet file, csv-separated gzipped file. build Can used skip [infer_build()] outdir results saved succesful execution? convert_p value used P = 0? name name output directory use_dbsnp use dbSNP apply filters? keep_indels indels kept? repair_cols missing columns repaired? implementation Use arrow bsgenome backend interact dbSNP? arrow supported moment logfile messages redirected logfile? log_on_err Optional. Can pass filepath copy logfile function exists. verbose Explain filters detail?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","text":"tibble NULL, depending outdir","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","text":"","code":"if (FALSE) { tidyGWAS(tbl = \"my_dataframe\", logfile = \"true\", name = \"test_run\", outdir = \"gwas_sumstat_dir\") }"},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a [dplyr::tibble()] with tidyGWAS column names — tidyGWAS_columns","title":"Create a [dplyr::tibble()] with tidyGWAS column names — tidyGWAS_columns","text":"tidyGWAS functions assumes fixed column names. function facilitates renaming column tidyGWAS format.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a [dplyr::tibble()] with tidyGWAS column names — tidyGWAS_columns","text":"","code":"tidyGWAS_columns(   tbl,   CHR = \"CHR\",   POS = \"POS\",   RSID = \"RSID\",   EffectAllele = \"EffectAllele\",   OtherAllele = \"OtherAllele\",   B = \"B\",   SE = \"SE\",   P = \"P\",   EAF = \"EAF\",   N = \"N\",   CaseN = \"CaseN\",   ControlN = \"ControlN\",   INFO = \"INFO\",   Z = \"Z\",   OR = \"OR\" )"},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a [dplyr::tibble()] with tidyGWAS column names — tidyGWAS_columns","text":"tbl data.frame CHR chromosome POS position RSID rsID dbSNP EffectAllele allele corresponding effect, B OtherAllele non-effect allele B Beta, effect, SE standard error P p value EAF effect-allele frequency N total sample size (case + control) CaseN number cases (case-control phenotypes) ControlN number controls (case-control phenotypes) INFO INFO score, imputation accuracy Z Z score odds-ratio","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a [dplyr::tibble()] with tidyGWAS column names — tidyGWAS_columns","text":"tibble changes column names","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a [dplyr::tibble()] with tidyGWAS column names — tidyGWAS_columns","text":"","code":"wrong_format <- dplyr::tibble(CHROM = 1, bp = 1000, A1 = \"C\", A2 = \"A\", Effect = 0.05) formatted <- tidyGWAS_columns( wrong_format, CHR = \"CHROM\", POS = \"bp\", EffectAllele = \"A1\", OtherAllele = \"A2\", B = \"Effect\" )"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that values in GWAS summary statistics columns are correct — validate_columns","title":"Check that values in GWAS summary statistics columns are correct — validate_columns","text":"`validate_columns()` remove rows, adds TRUE/FALSE flag specified column.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that values in GWAS summary statistics columns are correct — validate_columns","text":"","code":"validate_columns(   tbl,   col = c(\"B\", \"SE\", \"EAF\", \"N\", \"Z\", \"P\", \"POS\", \"CHR\", \"EffectAllele\", \"OtherAllele\"),   verbose = TRUE,   convert_p = 2.225074e-308 )"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that values in GWAS summary statistics columns are correct — validate_columns","text":"tbl tibble [tidyGWAS_columns()] format. col column check values ? verbose details filter reported? convert_p pvalue equal 0, value replaced ? default, value smallest possible double R can represent. P values smaller , R often reads character. can cause issues downstream analysis, therefore recommended deal extremely small pvalues early .","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that values in GWAS summary statistics columns are correct — validate_columns","text":"[dplyr::tibble()], column added named invalid_col. validate \"B\" column, validate_columns add TRUE/FALSE column named invalid_B input tibble.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that values in GWAS summary statistics columns are correct — validate_columns","text":"","code":"if (FALSE) { gwas_file <- validate_columns(  tbl = gwas_file,  col = \"B\",  verbose = FALSE,  # if you want to keep 0 pvalues as 0.  convert_p = 0 ) dplyr::filter(gwas_file, invalid_P) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/verify_chr_pos_rsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare CHR, POS and RSID with dbSNP reference data — verify_chr_pos_rsid","title":"Compare CHR, POS and RSID with dbSNP reference data — verify_chr_pos_rsid","text":"Compare CHR, POS RSID dbSNP reference data","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/verify_chr_pos_rsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare CHR, POS and RSID with dbSNP reference data — verify_chr_pos_rsid","text":"","code":"verify_chr_pos_rsid(sumstat, build = c(\"NA\", \"37\", \"38\"))"},{"path":"http://arvidharder.com/tidyGWAS/reference/verify_chr_pos_rsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare CHR, POS and RSID with dbSNP reference data — verify_chr_pos_rsid","text":"sumstat sumstat tibble format, [tidyGWAS_columns()] names build genome build. unknown (\"NA\"), build inferred using [infer_build()]","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/verify_chr_pos_rsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare CHR, POS and RSID with dbSNP reference data — verify_chr_pos_rsid","text":"tibble","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/verify_chr_pos_rsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare CHR, POS and RSID with dbSNP reference data — verify_chr_pos_rsid","text":"","code":"if (FALSE) { gwas <- tidyGWAS::test_file # make_callback can be passed a filepath to write out removed rows to. callback <- make_callback(\"~/output_folder/verify_chr_pos_rsid_removed_rows.tsv\") verify_chr_pos_rsid(gwas, bs, build = 37) }"}]
