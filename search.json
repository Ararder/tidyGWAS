[{"path":"http://arvidharder.com/tidyGWAS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tidyGWAS authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"installation","dir":"Articles","previous_headings":"Quick start","what":"Installation","title":"tidyGWAS","text":"","code":"devtools::install_github(\"ararder/tidyGWAS\") # install.packages(\"devtools\") remotes::install_github(\"ararder/tidyGWAS\") # install.packages(\"remotes\")"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"download-reference-files---this-only-has-to-be-done-once","dir":"Articles","previous_headings":"Quick start","what":"Download reference files - This only has to be done once","title":"tidyGWAS","text":"","code":"library(tidyGWAS) library(fs)  # Provide filepath to a directory where you want to store reference files ref_dir <- \"path/to/storage/directory\" download_ref_files(ref_dir)  # the reference files will be stored in ref_dir/dbSNP155 dbsnp_files <- paste0(ref_dir, \"/dbSNP155\")"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"provide-column-names-tidygwas-understands","dir":"Articles","previous_headings":"Quick start","what":"Provide column names tidyGWAS understands","title":"tidyGWAS","text":"tidyGWAS automatically parse common column names, need provide correct column names. tidyGWAS_columns() helper function . tidyGWAS uses following naming: Note: RSID column format CHR:BP:A1:A2, can still pass RSID. Note: N missing sumstats, can pass later [tidyGWAS()] tidyGWAS column names: CHR POS RSID EffectAllele OtherAllele EAF B SE P CaseN ControlN N INFO Z","code":"# Read in the sumstats you want to clean # sumstats <- readr::read_tsv(\"path/to_sumstats/gwas.tsv.gz\") df <- tidyGWAS_columns(   tbl = sumstats,   CHR = \"CHROM\",   POS = \"BP\",   EffectAllele = \"Allele1\" )  cleaned <- tidyGWAS(   tbl = df,    # provide the filepath to the refence files you downloaded previously   # and add dbSNP155   dbsnp_path = paste0(dbsnp_files, \"/dbSNP155\"),   # it's useful to write all the messages to a logfile, so messages are saved.   logfile=TRUE,   output_format = \"csv\"   )"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"in-depth-walk-through","dir":"Articles","previous_headings":"","what":"In depth walk-through","title":"tidyGWAS","text":"Let’s walk step carefully, using example files provided tidyGWAS package. using version sumstats latest GWAS schizophrenia Psychiatric Genomics Consortium (PGC3) mandatory argument tbl. tidyGWAS accepts either -memory base::data.frame() filepath text file. pass filepath text file, tidyGWAS attempt read using arrow::read_tsv_arrow(). ’s uncommon sumstats formats supported function, case recommend read file using data.table::fread() readr::read_tsv() first, pass data.frame tidyGWAS(). dbsnp_path passed, tidyGWAS skip functions relating dbSNP, repairing CHR POS, detecting providing coordinate genome builds.","code":"library(tidyGWAS) library(fs)  example_sumstats <- tidyGWAS::test_file # here we use the example files provided in the tidyGWAS package example_ref_file <-  fs::path(fs::path_package(\"tidyGWAS\"), \"extdata/dbSNP155\")  #The columns have been renamed to follow the tidyGWAS format:  colnames(example_sumstats) #>  [1] \"CHR\"          \"POS\"          \"RSID\"         \"EffectAllele\" \"OtherAllele\"  #>  [6] \"B\"            \"SE\"           \"EAF\"          \"INFO\"         \"P\"            #> [11] \"CaseN\"        \"ControlN\" example_sumstats |>    head() #>   CHR      POS        RSID EffectAllele OtherAllele            B     SE #> 1   6 31819813 rs183988210            C           G -0.005696193 0.0292 #> 2  16 13991338   rs8044430            T           C -0.017695649 0.0092 #> 3   9 85016930 rs111404043            A           T -0.002302649 0.0185 #> 4  19 15743403   rs4807961            C           G  0.002397125 0.0099 #> 5  18  5948313    rs948293            T           C  0.001698557 0.0092 #> 6  13 47224772       rs837            G           A  0.027196792 0.0086 #>         EAF  INFO        P CaseN ControlN #> 1 0.9754088 0.936 0.844400 51235    74087 #> 2 0.6407741 0.951 0.053150 53386    77258 #> 3 0.9160000 0.701 0.899700 53386    77258 #> 4 0.2556345 0.996 0.807400 53386    77258 #> 5 0.3318173 0.971 0.857800 53386    77258 #> 6 0.4470432 1.010 0.001594 53386    77258 # a minimal example, without dbSNP reference files cleaned <- tidyGWAS(   tbl = example_sumstats    # dbsnp_path = dbsnp_file ) # Passing a filepath also works cleaned <- tidyGWAS(   tbl = \"/home/all_sumstats/raw_sumstats.txt.gz\"   dbsnp_path = dbsnp_file ) # if the file is not parsed correctly using arrow::read_tsv_arrow, you can use # data.table::fread() or readr::read_tsv() first, and then pass the data.frame to tidyGWAS   df <- data.table::fread(\"/home/all_sumstats/raw_sumstats.txt.gz\") cleaned <- tidyGWAS(   tbl = df,   dbsnp_path = dbsnp_file )"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"a-more-typical-workflow","dir":"Articles","previous_headings":"In depth walk-through","what":"A more typical workflow","title":"tidyGWAS","text":"Typically, call tidyGWAS() arguments example . default tidyGWAS() use base::tempdir() write execution. addition, cleaned sumstat also returned function. means files saved quit R session. behavior can adjusted outdir argument, files copied outdir successful run. Let’s take look typical call tidyGWAS look: logfile can set TRUE, output tidyGWAS saved logfile name output directory can named convenience. output_format tidyGWAS supports three output formats: ‘csv’, ‘parquet’ ‘hivestyle’ outdir filepath directory want store output. folder exist running tidyGWAS. , tidyGWAS throw error prevent overwriting files take look output folder provided, can see new folder created, can see standard files tidyGWAS output","code":"# your own sumstat example_file <- tidyGWAS::test_file  # a directory where you want your data to be stored after succesful cleaning. # here we are using a tempdir, as an example gwas_folder <- tempfile(pattern = \"tidyGWAS\")  cleaned <- tidyGWAS(   tbl = example_file,    dbsnp_path = example_ref_file,   # it's useful to write all the messages to a logfile, so messages are saved.   logfile=TRUE,   # by default, the name of the output folder is a concotonated call to Sys.time()   # but you can adjust this by using the name argument   # by default, the saved file is written out as a gzipped csv file,   # however, the arrow parquet format offers many advantages over the classical csv file   output_format = \"parquet\",   # by passing the argument outdir, you can tell tidyGWAS to copy over files   # after a finished execution to that directory   outdir = gwas_folder   ) #> ℹ Output is redirected to logfile: /tmp/RtmptQt6G0/tidyGWAS1998b8f5d72/tidyGWAS_logfile.txt #>  #> ── Running tidyGWAS 0.7.0 ────────────────────────────────────────────────────── #> Starting at 2023-12-04 12:18:56.575089, with 100000 rows in input data.frame #> ℹ Saving output in folder: /tmp/RtmptQt6G0/tidyGWAS1998b8f5d72 #>  #>  #>  #> ── Checking that columns follow tidyGWAS format  #>  #> ✔ The following columns are used for further steps: CHR, POS, RSID, EffectAllele, OtherAllele, B, SE, EAF, INFO, P, CaseN, ControlN, and rowid #>  #>  #>  #> ── Checking for columns with all NA  #>  #> ✔ Found no columns with all NA #>  #>  #>  #> ── 1) Scanning for rows with NA ── #>  #>  #>  #> ✔ No rows contained missing values #>  #>  #>  #> ── 2) Scanning for rows with duplications ── #>  #>  #>  #> ℹ A unique ID is formed by concontenating CHR, POS, EffectAllele, and OtherAllele #>  #> ✔ Found no duplications #>  #>  #>  #> ── 3) Scanning for indels ── #>  #>  #>  #> 1. EffectAllele or OtherAllele, character length > 1: A vs AA #>  #> 2. EffectAllele or OtherAllele coded as 'D', 'I', or 'R' #>  #> ✔ Detected 0 rows as indels #>  #>  #>  #> ── 4a) Validating columns  #>  #> ℹ The median value of B is -0.0012, which seems reasonable #>  #>  #>  #> ── All rows passed validation  #>  #>  #>  #> ── 5) Adding RSID based on CHR:POS. Adding dbSNP based QC flags  #>  #> ℹ Inferring build by matching 10000 rows to GRCh37 and GRCh38 #>  #> 3349 snps matched GRCh38, 9998 for GRCh37, inferring build to be 37 #>  #>  #> ── 6) Repairing missings statistics columns if possible ── #>  #>  #>  #> ℹ Z missing: Calculating Z using the formula:  Z = B / SE #>  #>  #>  #> ── Finished repair_stats:   #>  #> ℹ Added 1 new columns: Z #>  #>  #>  #> ── Listing final breakdown of removed rows:   #>  #>  #>  #> ── Finished tidyGWAS ─────────────────────────────────────────────────────────── #>  #> ℹ A total of 0 rows were removed #>  #> ℹ Total running time: 4.8s list.files(gwas_folder, recursive = TRUE) #> [1] \"cleaned_GRCh38.parquet\"                  #> [2] \"pipeline_info/removed_rows_main.parquet\" #> [3] \"raw_sumstats.parquet\"                    #> [4] \"tidyGWAS_logfile.txt\""},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"creating-the-correct-column-names","dir":"Articles","previous_headings":"In depth walk-through","what":"Creating the correct column names","title":"tidyGWAS","text":"tidyGWAS automatically detect column names, expect data.frame() contain correct column names. tidyGWAS_columns helper function created match column name tidyGWAS format.","code":"# what if we have a file where POS was named bp, and B was named BETA? # tidyGWAS will not recognize these as valid column names and would drop them. wrong_colnames <- dplyr::rename(example_file, bp = POS, BETA = B) head(wrong_colnames) #>   CHR       bp        RSID EffectAllele OtherAllele         BETA     SE #> 1   6 31819813 rs183988210            C           G -0.005696193 0.0292 #> 2  16 13991338   rs8044430            T           C -0.017695649 0.0092 #> 3   9 85016930 rs111404043            A           T -0.002302649 0.0185 #> 4  19 15743403   rs4807961            C           G  0.002397125 0.0099 #> 5  18  5948313    rs948293            T           C  0.001698557 0.0092 #> 6  13 47224772       rs837            G           A  0.027196792 0.0086 #>         EAF  INFO        P CaseN ControlN #> 1 0.9754088 0.936 0.844400 51235    74087 #> 2 0.6407741 0.951 0.053150 53386    77258 #> 3 0.9160000 0.701 0.899700 53386    77258 #> 4 0.2556345 0.996 0.807400 53386    77258 #> 5 0.3318173 0.971 0.857800 53386    77258 #> 6 0.4470432 1.010 0.001594 53386    77258 # we can use tidyGWAS_columns to specify current names: correct_names <- tidyGWAS_columns(   # first argument is the data.frame   tbl = wrong_colnames,    # then any column which is not correctly named:   POS = \"bp\",   B = \"BETA\"   ) head(correct_names) #>   CHR      POS        RSID EffectAllele OtherAllele            B     SE #> 1   6 31819813 rs183988210            C           G -0.005696193 0.0292 #> 2  16 13991338   rs8044430            T           C -0.017695649 0.0092 #> 3   9 85016930 rs111404043            A           T -0.002302649 0.0185 #> 4  19 15743403   rs4807961            C           G  0.002397125 0.0099 #> 5  18  5948313    rs948293            T           C  0.001698557 0.0092 #> 6  13 47224772       rs837            G           A  0.027196792 0.0086 #>          P       EAF CaseN ControlN  INFO #> 1 0.844400 0.9754088 51235    74087 0.936 #> 2 0.053150 0.6407741 53386    77258 0.951 #> 3 0.899700 0.9160000 53386    77258 0.701 #> 4 0.807400 0.2556345 53386    77258 0.996 #> 5 0.857800 0.3318173 53386    77258 0.971 #> 6 0.001594 0.4470432 53386    77258 1.010"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"parallel-computation","dir":"Articles","previous_headings":"","what":"Parallel computation","title":"tidyGWAS","text":"tidGWAS automatically detects number cores, uses parallelize alignment dbSNP. cases, example running tidyGWAS HPC cluster, might need manually set number cores, can done using OMP_NUM_THREADS variable. larger number cores requested HPC job (example , “–cpus-per-task” flag)","code":"#SBATCH --mem=60gb #SBATCH --time=24:0:00 #SBATCH --cpus-per-task 8 export OMP_NUM_THREADS=8  outdir=$(pwd) gwas=$outdir/my_gwas.tsv.gz dbsnp_files=\"dbSNP155\" Rscript -e \"tidyGWAS(commandArgs(trailingOnly = TRUE)[1],  dbsnp_path = commandArgs(trailingOnly = TRUE)[2],outdir = commandArgs(trailingOnly = TRUE)[3], logfile=TRUE)\" $gwas $dbsnp_files $outdir"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"computational-cost","dir":"Articles","previous_headings":"","what":"Computational cost","title":"tidyGWAS","text":"Memory use time scales size summary statistics. running tidyGWAS experimentally, ’s estimation time memory.","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"cpu-usage","dir":"Articles","previous_headings":"Computational cost","what":"CPU usage","title":"tidyGWAS","text":"CPU usage depends heavily CPU type number available cores. Macbook Pro M2: 8 million rows, ~4.42 minutes, < 16GB memory used AMD EPYC 75F3 32-Core Processor; ~ 6 minutes < 16GB memory used 60 million rows: AMD EPYC 75F3 32-Core Processor; ~ 34 minutes < 75gb using 5 cores","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"memory-usage-and-number-of-rows","dir":"Articles","previous_headings":"Computational cost","what":"Memory usage and number of rows","title":"tidyGWAS","text":"memory usage likely main constraint increasing size summary statistics. 20 million rows < 20gb 40 million rows < 40gb 60 million rows < 75gb","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"download_ref_data-is-not-working","dir":"Articles","previous_headings":"","what":"download_ref_data() is not working","title":"tidyGWAS","text":"tidyGWAS uses version dbSNP 155 converted Apache Arrow .parquet files. can download dbSNP155 reference file inside R using googledrive package, manually navigating file file needs untarred","code":"# You can download the file from inside R using the googledrive package: library(googledrive) googledrive::drive_deauth() id <- googledrive::as_id(\"1LmgfmTQaWwJaFpBHcRQIY_kwe5iN7Pj6\")  ##### EDIT THIS: filepath_to_store_dir <- \"\" ##### ---------------------  drive_download(id, path = filepath_to_store_dir) # change directory to where the downloaded file is tar -xf dbSNP155.tar dbSNP155"},{"path":"http://arvidharder.com/tidyGWAS/articles/transforming_dbsnp_to_parquet.html","id":"converting-dbsnp-to--parquet-files","dir":"Articles","previous_headings":"","what":"Converting dbSNP to .parquet files","title":"get-to-know-dbsnp","text":"dbSNP data accessed munged BSgenome package. Takes 10~30 minutes per chromosome, peak memory usage ~80gb chromosome 2","code":"library(arrow) library(BSgenome) library(glue)  chr <- commandArgs(trailingOnly = TRUE)[1] build <- commandArgs(trailingOnly = TRUE)[2]  if(build == \"37\") {   snps <- SNPlocs.Hsapiens.dbSNP155.GRCh37::SNPlocs.Hsapiens.dbSNP155.GRCh37   genome <- BSgenome.Hsapiens.1000genomes.hs37d5::BSgenome.Hsapiens.1000genomes.hs37d5   grch <- \"GRCh37\" } else if(build == \"38\") {    snps <- SNPlocs.Hsapiens.dbSNP155.GRCh38::SNPlocs.Hsapiens.dbSNP155.GRCh38   genome <- BSgenome.Hsapiens.NCBI.GRCh38::BSgenome.Hsapiens.NCBI.GRCh38   grch <- \"GRCh38\" } outpath <- glue(\"~/arvhar/snp_level_annotatations/dbSNP155/{grch}\")  # IUPAC ambuigity codes, to update FASTA files from ref genome updated <-   stringr::str_split(Biostrings::IUPAC_CODE_MAP, \"\") |>   purrr::map(\\(x) stringr::str_flatten(x, collapse=\",\")) |>   purrr::map_chr(stringr::str_c) |>   purrr::set_names(names(Biostrings::IUPAC_CODE_MAP))    print(glue(\"converting data for chr {chr}\"))  tictoc::tic(glue::glue(\"finished reading in chr: {chr}\")) all_snps <- snpsBySeqname(snps, seqnames = chr, genome = genome, drop.rs.prefix=TRUE) tictoc::toc()   dt <- data.table::as.data.table(all_snps) dt <- dplyr::mutate(dt, ref_allele = updated[ref_allele], alt_alleles = updated[alt_alleles]) dt <- tidyr::separate_longer_delim(dt, ref_allele, delim =\",\")  dt <- dplyr::select(dt, CHR = seqnames, POS =pos, RSID = RefSNP_id, REF = ref_allele, ALT = alt_alleles)  # storing as integer speeds up computation later on dt <- dplyr::mutate(dt, RSID = as.integer(stringr::str_sub(start = 3, RSID)))  print(glue(\"Writing data to {outpath}\")) write_dataset(dplyr::group_by(dt, CHR), outpath)"},{"path":"http://arvidharder.com/tidyGWAS/articles/transforming_dbsnp_to_parquet.html","id":"transforming-refsnp-merged-to-parquet","dir":"Articles","previous_headings":"Converting dbSNP to .parquet files","what":"Transforming refsnp-merged to parquet","title":"get-to-know-dbsnp","text":"","code":"library(arrow) library(tidyverse)  # wget https://ftp.ncbi.nlm.nih.gov/snp/latest_release/JSON/refsnp-merged.json.bz2 ref <- read_json_arrow(\"~/refsnp-merged.json.bz2\", col_select = c(\"refsnp_id\", \"merged_snapshot_data\"))  RSID = ref$merged_snapshot_data$merged_into test <- map_chr(ref$merged_snapshot_data$merged_into, \\(x) stringr::str_flatten(x))  old_RSID = ref$refsnp_id tmp = data.frame(old_RSID, test) tmp$old_RSID = as.integer(tmp$old_RSID) tmp$test = as.integer(tmp$test)   write_parquet(tmp, \"~/part0\", compression = \"gzip\")  # write out as parquet"},{"path":"http://arvidharder.com/tidyGWAS/articles/transforming_dbsnp_to_parquet.html","id":"noteworthy-aspects-of-dbsnp155","dir":"Articles","previous_headings":"","what":"Noteworthy aspects of dbSNP155","title":"get-to-know-dbsnp","text":"dbSNP version: 155 section work progress, summarises idiosyncracies dbSNP data.","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/transforming_dbsnp_to_parquet.html","id":"issue-1---same-chrpos-can-map-to-multiple-snps","dir":"Articles","previous_headings":"Noteworthy aspects of dbSNP155","what":"Issue 1) - same CHR:POS can map to multiple SNPs","title":"get-to-know-dbsnp","text":"particular example, three SNPs merged rs10157617. check history tab however, can see merge happened dbSNP 156. - issue yet fixed data tidyGWAS using.","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/transforming_dbsnp_to_parquet.html","id":"solution","dir":"Articles","previous_headings":"Noteworthy aspects of dbSNP155 > Issue 1) - same CHR:POS can map to multiple SNPs","what":"Solution","title":"get-to-know-dbsnp","text":"case CHR:POS maps multiple RSIDs, tidyGWAS selects RSID smallest rs number, mimic dbSNP performs merges.","code":"# on GRCh38 #  CHR        POS RSID         ref_allele alt_alleles #   <chr>    <int> <chr>        <chr>      <list>      # 1 1     39491595 rs10157617   T          <chr [2]>   # 2 1     39491595 rs1638449573 T          <chr [1]>   # 3 1     39491595 rs1638449625 T          <chr [1]>   # 4 1     39491595 rs1638449683 T          <chr [1]>"},{"path":"http://arvidharder.com/tidyGWAS/articles/transforming_dbsnp_to_parquet.html","id":"some-snps-only-have-chrpos-on-grch37","dir":"Articles","previous_headings":"Noteworthy aspects of dbSNP155 > Issue 1) - same CHR:POS can map to multiple SNPs","what":"2) Some SNPs only have CHR:POS on GRCh37","title":"get-to-know-dbsnp","text":"SNPs CHR POS GRCh37, yet mapped GRCh38. tidyGWAS() simply show rows CHR POS missing, CHR_37 POS_37 !","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/transforming_dbsnp_to_parquet.html","id":"some-rsids-map-to-multiple-chrpos","dir":"Articles","previous_headings":"Noteworthy aspects of dbSNP155 > Issue 1) - same CHR:POS can map to multiple SNPs","what":"3) some RSIDs map to multiple CHR:POS","title":"get-to-know-dbsnp","text":"See NCBI discussion","code":""},{"path":"http://arvidharder.com/tidyGWAS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Arvid Harder. Maintainer.","code":""},{"path":"http://arvidharder.com/tidyGWAS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harder (2023). tidyGWAS: Quality control GWAS summary statistics minimal filtering. R package version 0.7.0, http://arvidharder.com/tidyGWAS/.","code":"@Manual{,   title = {tidyGWAS: Quality control for GWAS summary statistics with minimal filtering},   author = {Arvid Harder},   year = {2023},   note = {R package version 0.7.0},   url = {http://arvidharder.com/tidyGWAS/}, }"},{"path":"http://arvidharder.com/tidyGWAS/index.html","id":"tidygwas","dir":"","previous_headings":"","what":"Quality control for GWAS summary statistics with minimal filtering","title":"Quality control for GWAS summary statistics with minimal filtering","text":"Genome-wide summary statistics becoming staple many different genetics genomics analysis pipelines. Often, specific filters suggested pipelines can different, requiring pipeline step summary statistics “munged”. tidyGWAS aims provide standardized format pipeline specific munging done. mind, tidyGWAS conservative removing rows, default keeps indels multi-allelic variants. tidyGWAS following: Detection duplicated rows (based RSID_REF_ALT CHR_POS_REF_ALT) Standardized column names Automatic updating merged RSIDs Detection optional removal deletions/insertions (“indels”) Detection non rsID values RSID column, automatic parsing common CHR:POS CHR:POS:REF:ALT format Standardization CHR values (ex: “23” -> “X”, “chr1” -> “1”) Validation standard GWAS columns, B, SE, P, N, FREQ, Z, CaseN, ControlN, A1, A2 Extremely small pvalues default converted 2.225074e-308 (minimum pvalue R) Imputation missing columns: RSID CHR:POS CHR:POS RSID. B,SE, P, Z missing possible Validation CHR:POS:RSID matching dbSNP v.155 Cleaned sumstats provided coordinates GRCh37 GRCh38, TRUE/FALSE flags indels variants multi-allelic dataset working standardized GWAS formats, ’ve found GRCh37 GRCh38 coordinates, standardized column names significantly speeds downstream analysis. computationally intensive part aligning summary statistics dbSNP 155 (> 940 million rows) GRCh37 GRCh38 (total 1.8 billion rows) implemented using Apache Arrow R implementation, allowing full function run <5 minutes, using less 16gb, ~7 million rows Macbook Pro M2.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/detect_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Insertions/Deletions ('indels') — detect_indels","title":"Detect Insertions/Deletions ('indels') — detect_indels","text":"Indels detected examining EffectAllele OtherAllele","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/detect_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Insertions/Deletions ('indels') — detect_indels","text":"","code":"detect_indels(tbl, indel_strategy, filepaths, ...)"},{"path":"http://arvidharder.com/tidyGWAS/reference/detect_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Insertions/Deletions ('indels') — detect_indels","text":"tbl dplyr::tibble() created parse_tbl() indel_strategy indels kept removed? filepaths list filepaths, created setup_pipeline_paths() ... pass additional arguments arrow::read_delim_arrow(), tbl filepath.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/detect_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Insertions/Deletions ('indels') — detect_indels","text":"tbl","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/detect_indels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect Insertions/Deletions ('indels') — detect_indels","text":"","code":"if (FALSE) { detect_indels(sumstat, TRUE, filepaths = setup_pipeline_paths(\"testing\")) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/download_ref_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Download references files used by tidyGWAS — download_ref_files","title":"Download references files used by tidyGWAS — download_ref_files","text":"Download references files used tidyGWAS","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/download_ref_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download references files used by tidyGWAS — download_ref_files","text":"","code":"download_ref_files(save_dir)"},{"path":"http://arvidharder.com/tidyGWAS/reference/download_ref_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download references files used by tidyGWAS — download_ref_files","text":"save_dir directory save reference files ","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/download_ref_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download references files used by tidyGWAS — download_ref_files","text":"","code":"if (FALSE) { download_ref_files(\"path/to_dir\") }"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all rows which are part of a set of duplicated rows — flag_duplicates","title":"Find all rows which are part of a set of duplicated rows — flag_duplicates","text":"Many duplication tools base::duplicated() dplyr::distinct() identify rows duplications. often useful see rows part duplication set, just second row. creates new column: dup_rsid dup_chr_pos, T/F flag. Specifically, flags rows duplication pair, just first last duplicate row, making easy work rows part duplication","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all rows which are part of a set of duplicated rows — flag_duplicates","text":"","code":"flag_duplicates(   tbl,   column = c(\"rsid\", \"chr_pos\", \"chr_pos_ref_alt\", \"rsid_ref_alt\") )"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find all rows which are part of a set of duplicated rows — flag_duplicates","text":"tbl tibble tidyGWAS_columns() column columns used form unique ID?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find all rows which are part of a set of duplicated rows — flag_duplicates","text":"tibble new columns dup_column","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find all rows which are part of a set of duplicated rows — flag_duplicates","text":"","code":"if (FALSE) {  # will tag multi-allelics as duplications flag_duplicates(tbl, column = \"rsid\") flag_duplicates(tbl, column = \"chr_pos\") # if you are interested in rows that are variant duplications flag_duplicates(tbl, column = \"rsid_ref_alt\") flag_duplicates(tbl, column = \"chr_pos_ref_alt\")  }"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect ","title":"Detect ","text":"Detect \"indels\" GWAS summary statistics","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect ","text":"","code":"flag_indels(tbl)"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect ","text":"tbl dplyr::tibble() columns EffectAllele OtherAllele","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect ","text":"dplyr::tibble() TRUE/FALSE column indel added, indel == TRUE corresponds row marked indel.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_indels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect ","text":"","code":"if (FALSE) { all_indels <-   flag_indels(tbl) |>   dplyr::filter(indels) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_invalid_rsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","title":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","text":"Detect entries valid rsID's GWAS summary statistics","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_invalid_rsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","text":"","code":"flag_invalid_rsid(tbl, regex = \"^[rR][sS]?\\\\d{1,10}$\")"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_invalid_rsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","text":"tbl dplyr::tibble() column RSID. regex regex used detect non-RSIDs","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_invalid_rsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","text":"dplyr::tibble() column invalid_rsid","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_invalid_rsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect entries that are not valid rsID's in GWAS summary statistics — flag_invalid_rsid","text":"","code":"if (FALSE) { flag_invalid_rsid(tbl) |> dplyr::filter(invalid_rsid) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/infer_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer what genome build a GWAS summary statistics file is on. — infer_build","title":"Infer what genome build a GWAS summary statistics file is on. — infer_build","text":"Infer genome build GWAS summary statistics file .","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/infer_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer what genome build a GWAS summary statistics file is on. — infer_build","text":"","code":"infer_build(tbl, n_snps = 10000, dbsnp_path)"},{"path":"http://arvidharder.com/tidyGWAS/reference/infer_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer what genome build a GWAS summary statistics file is on. — infer_build","text":"tbl dplyr::tibble(), formated tidyGWAS_columns() n_snps number snps check CHR POS dbsnp_path filepath dbSNP155 directory (untarred dbSNP155.tar)","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/infer_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer what genome build a GWAS summary statistics file is on. — infer_build","text":"either \"37\" \"38\"","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/infer_build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer what genome build a GWAS summary statistics file is on. — infer_build","text":"","code":"if (FALSE) { genome_build <- infer_build(gwas_sumstats) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/parse_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse the input data.frame or filepath to tidyGWAS — parse_tbl","title":"Parse the input data.frame or filepath to tidyGWAS — parse_tbl","text":"Parse input data.frame filepath tidyGWAS","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/parse_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse the input data.frame or filepath to tidyGWAS — parse_tbl","text":"","code":"parse_tbl(tbl, ...)"},{"path":"http://arvidharder.com/tidyGWAS/reference/parse_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse the input data.frame or filepath to tidyGWAS — parse_tbl","text":"tbl data.frame character() vector ... optional arguments passed arrow::read_delim_arrow()","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/parse_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse the input data.frame or filepath to tidyGWAS — parse_tbl","text":"dplyr::tibble()","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/parse_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse the input data.frame or filepath to tidyGWAS — parse_tbl","text":"","code":"if (FALSE) { # read in file from disk, using tab delimiter and skipping first 100 rows df <- parse_tbl(\"path/to_sumstats\", delim = \"\\t\", skip = 100) df <- parse_tbl(tibble(RSID = \"rs1001\", B = 0.01, P = 0.005, SE = 0.001, N = 100)) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove duplicated rows — remove_duplicates","title":"Remove duplicated rows — remove_duplicates","text":"remove_duplicates uses either CHR:POS:EffectAllele:OtherAllele RSID:EffectAllele:OtherAllele compute uniqueness. possible rows arranged p-value, select row smallest P.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove duplicated rows — remove_duplicates","text":"","code":"remove_duplicates(tbl, filepaths)"},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove duplicated rows — remove_duplicates","text":"tbl dplyr::tibble() created parse_tbl() filepaths list filepaths, created setup_pipeline_paths()","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove duplicated rows — remove_duplicates","text":"tbl","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove duplicated rows — remove_duplicates","text":"","code":"if (FALSE) { paths <- setup_pipeline_paths(\"testing\") df <- remove_duplicates(sumstat, paths) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_rows_with_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove rows with missing values, and write out the remowed files to disk — remove_rows_with_na","title":"Remove rows with missing values, and write out the remowed files to disk — remove_rows_with_na","text":"Remove rows missing values, write remowed files disk","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_rows_with_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove rows with missing values, and write out the remowed files to disk — remove_rows_with_na","text":"","code":"remove_rows_with_na(tbl, filepaths)"},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_rows_with_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove rows with missing values, and write out the remowed files to disk — remove_rows_with_na","text":"tbl dplyr::tibble() created parse_tbl() filepaths list filepaths, created setup_pipeline_paths()","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_rows_with_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove rows with missing values, and write out the remowed files to disk — remove_rows_with_na","text":"tbl","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/remove_rows_with_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove rows with missing values, and write out the remowed files to disk — remove_rows_with_na","text":"","code":"if (FALSE) { df <- remove_rows_with_na(sumstat, setup_pipeline_paths(\"testing\")) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CHR and POS using RSID — repair_chr_pos","title":"Get CHR and POS using RSID — repair_chr_pos","text":"repair_rsid() repair_chr_pos() work similary, assumes either rsid chr_pos missing. functions first check build input data using infer_build(). Secondly, maps row dbSNP using either rsid chr_pos. Rows without match flagged no_dbsnp_entry = TRUE. Subsequently, rows EffectAllele OtherAllele match alleles dbSNP flagged incompat_alleles = TRUE. Lastly, whichever build missing added data.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CHR and POS using RSID — repair_chr_pos","text":"","code":"repair_chr_pos(tbl, dbsnp_path, add_missing_build = TRUE)"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CHR and POS using RSID — repair_chr_pos","text":"tbl dplyr::tibble(), formated tidyGWAS_columns() dbsnp_path filepath dbSNP155 directory (untarred dbSNP155.tar) add_missing_build build sumstats also added ?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CHR and POS using RSID — repair_chr_pos","text":"dplyr::tibble() columns CHR, POS, POS_37 CHR_37 added","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get CHR and POS using RSID — repair_chr_pos","text":"","code":"if (FALSE) { sumstat_df <- repair_chr_pos(sumstat) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Use CHR and POS to get RSID from dbSNP v.155 — repair_rsid","title":"Use CHR and POS to get RSID from dbSNP v.155 — repair_rsid","text":"repair_rsid() repair_chr_pos() work similary, assumes either rsid chr_pos missing. functions first check build input data using infer_build(). Secondly, maps row dbSNP using either rsid chr_pos. Rows without match flagged no_dbsnp_entry = TRUE. Subsequently, rows EffectAllele OtherAllele match alleles dbSNP flagged incompat_alleles = TRUE. Lastly, whichever build missing added data.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use CHR and POS to get RSID from dbSNP v.155 — repair_rsid","text":"","code":"repair_rsid(   tbl,   build = c(\"NA\", \"37\", \"38\"),   dbsnp_path,   add_missing_build = TRUE )"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use CHR and POS to get RSID from dbSNP v.155 — repair_rsid","text":"tbl dplyr::tibble(), formated tidyGWAS_columns() build Can used skip infer_build() dbsnp_path filepath dbSNP155 directory (untarred dbSNP155.tar) add_missing_build build sumstats also added ?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use CHR and POS to get RSID from dbSNP v.155 — repair_rsid","text":"dplyr::tibble() columns CHR, POS, POS_37 CHR_37 added","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use CHR and POS to get RSID from dbSNP v.155 — repair_rsid","text":"","code":"if (FALSE) { sumstat_df <- repair_rsid(sumstat, bsgenome_list) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"repair_stats() collection functions can used infer missing columns GWAS summary statistics. functions based functionality found online.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"","code":"repair_stats(tbl, verbose = FALSE)"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"tbl dplyr::tibble(), formated tidyGWAS_columns() verbose repair_stats print masthead explaining ?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"tibble","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"","code":"if (FALSE) { updated <- repair_stats(my_gwas) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/select_correct_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove all columns that do not follow tidyGWAS naming — select_correct_columns","title":"Remove all columns that do not follow tidyGWAS naming — select_correct_columns","text":"Remove columns follow tidyGWAS naming","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/select_correct_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove all columns that do not follow tidyGWAS naming — select_correct_columns","text":"","code":"select_correct_columns(tbl, study_n, verbose = TRUE)"},{"path":"http://arvidharder.com/tidyGWAS/reference/select_correct_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove all columns that do not follow tidyGWAS naming — select_correct_columns","text":"tbl dplyr::tibble() created parse_tbl() study_n Sometimes N missing GWAS summary statistics. often much useful set study-wide N rows, instead leaving N column missing. study_n can used set N column. verbose Explain filters detail?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/select_correct_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove all columns that do not follow tidyGWAS naming — select_correct_columns","text":"dplyr::tibble(), columns following tidyGWAS_columns() naming kept","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/select_correct_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove all columns that do not follow tidyGWAS naming — select_correct_columns","text":"","code":"if (FALSE) { sumstats <- select_correct_columns(sumstats) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/setup_pipeline_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the folder structure for tidyGWAS — setup_pipeline_paths","title":"Create the folder structure for tidyGWAS — setup_pipeline_paths","text":"Create folder structure tidyGWAS","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/setup_pipeline_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the folder structure for tidyGWAS — setup_pipeline_paths","text":"","code":"setup_pipeline_paths(outdir, overwrite = FALSE)"},{"path":"http://arvidharder.com/tidyGWAS/reference/setup_pipeline_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the folder structure for tidyGWAS — setup_pipeline_paths","text":"outdir filepath folder data stored. overwrite existing files overwritten?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/setup_pipeline_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the folder structure for tidyGWAS — setup_pipeline_paths","text":"list filepaths","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/setup_pipeline_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the folder structure for tidyGWAS — setup_pipeline_paths","text":"","code":"setup_pipeline_paths(tempfile()) #> $base #> [1] \"/tmp/RtmpVdXrIt/file180171fc9ae7\" #>  #> $logfile #> [1] \"/tmp/RtmpVdXrIt/file180171fc9ae7/tidyGWAS_logfile.txt\" #>  #> $cleaned #> [1] \"/tmp/RtmpVdXrIt/file180171fc9ae7/tidyGWAS_hivestyle\" #>  #> $updated_rsid #> [1] \"/tmp/RtmpVdXrIt/file180171fc9ae7/pipeline_info/updated_rsid.parquet\" #>  #> $failed_rsid_parse #> [1] \"/tmp/RtmpVdXrIt/file180171fc9ae7/pipeline_info/removed_failed_rsid_parse.parquet\" #>  #> $removed_rows #> [1] \"/tmp/RtmpVdXrIt/file180171fc9ae7/pipeline_info/removed_rows_\" #>"},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":null,"dir":"Reference","previous_headings":"","what":"PGC3 schizophrenia GWAS — test_file","title":"PGC3 schizophrenia GWAS — test_file","text":"subset data Psychiatics Genonomics Consortium GWAS schizophrenia (european subset)","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PGC3 schizophrenia GWAS — test_file","text":"","code":"test_file"},{"path":[]},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":"test-file","dir":"Reference","previous_headings":"","what":"test_file","title":"PGC3 schizophrenia GWAS — test_file","text":"data frame 100,000 rows 12 columns: CHR Chromosome POS Genomic position RSID rsID dbSNP EffecttAllele allele correspods effect, B OtherAllelle Non-effect allele B Effect, Beta SE Standard error B EAF EffectAllele Frequency, frequency EffectAllele INFO Imputation accuracy P Pvalue CaseN Number cases ControlN Number controls","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PGC3 schizophrenia GWAS — test_file","text":"https://figshare.com/ndownloader/files/34517828","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","title":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","text":"tidyGWAS() performs set validations input colummns, repairs missing columns, can add missing CHR/POS RSID. addition, CHR POS standardised GRCh38, coordinates GRCh37 added well. Briefly, tidyGWAS() updates RSID possible using refsnp-merged file dbSNP. inputed column validated coerced correct type. Missing CHR/POS RSID detected imputed using repair_rsid() repair_chr_pos(). statistis P, B missing, tidyGWAS() attempt impute possible using repair_stats() Standard column names assumed, inputting function. deliberate decision, automatic parsing important column names can ambigious example, sumstats, A1 referes effect allele, formats use A1 non-effect allele. tidyGWAS_columns() can used standardise column names, see standard format.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","text":"","code":"tidyGWAS(   tbl,   ...,   dbsnp_path,   output_format = c(\"csv\", \"hivestyle\", \"parquet\"),   build = c(\"NA\", \"37\", \"38\"),   outdir = paste0(tempdir(), \"/\", stringr::str_replace_all(date(), pattern = c(` ` = \"_\",     `:` = \"_\"))),   study_n,   convert_p = 2.225074e-308,   indel_strategy = c(\"keep\", \"remove\"),   overwrite = FALSE,   repair_cols = TRUE,   logfile = FALSE,   verbose = FALSE,   add_missing_build = TRUE )"},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","text":"tbl data.frame character() vector ... pass additional arguments arrow::read_delim_arrow(), tbl filepath. dbsnp_path filepath dbSNP155 directory (untarred dbSNP155.tar) output_format finished cleaned file saved? \"csv\" corresponds arrow::write_csv_arrow() 'hivestyle' corresponds arrow::write_dataset() split CHR 'parquet' corresponds arrow::write_parquet() build Can used skip infer_build() outdir filepath folder data stored. study_n Sometimes N missing GWAS summary statistics. often much useful set study-wide N rows, instead leaving N column missing. study_n can used set N column. convert_p value used P = 0? indel_strategy indels kept removed? overwrite existing files overwritten? repair_cols missing columns repaired? logfile messages redirected logfile? verbose Explain filters detail? add_missing_build build sumstats also added ?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","text":"dplyr::tibble()","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute validation and quality control of GWAS summmary statistics — tidyGWAS","text":"","code":"if (FALSE) { tidyGWAS(tbl = \"my_dataframe\", logfile = \"true\", name = \"test_run\", outdir = \"gwas_sumstat_dir\") }"},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dplyr::tibble() with tidyGWAS column names — tidyGWAS_columns","title":"Create a dplyr::tibble() with tidyGWAS column names — tidyGWAS_columns","text":"tidyGWAS() requires column names specific format. function facilitates format, also provides list columns tidyGWAS considers valid. columns non tidyGWAS column name dropped.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dplyr::tibble() with tidyGWAS column names — tidyGWAS_columns","text":"","code":"tidyGWAS_columns(   tbl,   CHR = \"CHR\",   POS = \"POS\",   RSID = \"RSID\",   EffectAllele = \"EffectAllele\",   OtherAllele = \"OtherAllele\",   B = \"B\",   SE = \"SE\",   P = \"P\",   EAF = \"EAF\",   N = \"N\",   CaseN = \"CaseN\",   ControlN = \"ControlN\",   INFO = \"INFO\",   Z = \"Z\",   OR = \"OR\" )"},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dplyr::tibble() with tidyGWAS column names — tidyGWAS_columns","text":"tbl dplyr::tibble() something coercible one CHR chromosome POS position RSID rsID dbSNP EffectAllele allele corresponding effect OtherAllele non-effect allele B Beta, effect, SE standard error P p value EAF effect-allele frequency N total sample size (case + control) CaseN number cases (case-control phenotypes) ControlN number controls (case-control phenotypes) INFO INFO score, imputation accuracy Z Z score odds-ratio","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dplyr::tibble() with tidyGWAS column names — tidyGWAS_columns","text":"tibble changes column names","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a dplyr::tibble() with tidyGWAS column names — tidyGWAS_columns","text":"function simple wrapper around dplyr::select(), possible tidyGWAS column argument-","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dplyr::tibble() with tidyGWAS column names — tidyGWAS_columns","text":"","code":"wrong_format <- dplyr::tibble(CHROM = 1, bp = 1000, A1 = \"C\", A2 = \"A\", Effect = 0.05) formatted <- tidyGWAS_columns( wrong_format, CHR = \"CHROM\", POS = \"bp\", EffectAllele = \"A1\", OtherAllele = \"A2\", B = \"Effect\" ) # columns that are wrongly named and NOT passed to tidyGWAS_columns() are dropped wrong_format <- dplyr::tibble(CHROM = 1, bp = 1000, A1 = \"C\", A2 = \"A\", Effect = 0.05) tidyGWAS_columns( wrong_format, CHR = \"CHROM\", POS = \"bp\", EffectAllele = \"A1\" ) #> # A tibble: 1 × 3 #>     CHR   POS EffectAllele #>   <dbl> <dbl> <chr>        #> 1     1  1000 C"},{"path":"http://arvidharder.com/tidyGWAS/reference/update_rsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Update rsIDs from dbSNP that have been merged into other RSIDs — update_rsid","title":"Update rsIDs from dbSNP that have been merged into other RSIDs — update_rsid","text":"Update rsIDs dbSNP merged RSIDs","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/update_rsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update rsIDs from dbSNP that have been merged into other RSIDs — update_rsid","text":"","code":"update_rsid(tbl, filepaths, dbsnp_path)"},{"path":"http://arvidharder.com/tidyGWAS/reference/update_rsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update rsIDs from dbSNP that have been merged into other RSIDs — update_rsid","text":"tbl dplyr::tibble() created parse_tbl() filepaths list filepaths, created setup_pipeline_paths() dbsnp_path filepath dbSNP155 directory","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/update_rsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update rsIDs from dbSNP that have been merged into other RSIDs — update_rsid","text":"tbl","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/update_rsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update rsIDs from dbSNP that have been merged into other RSIDs — update_rsid","text":"","code":"if (FALSE) { update_rsid(sumstat, filepaths = setup_pipeline_paths(\"testing\"), dbsnp_path = \"~/dbSNP155\") }"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that values in GWAS summary statistics columns are correct — validate_columns","title":"Check that values in GWAS summary statistics columns are correct — validate_columns","text":"validate_columns() remove rows, adds TRUE/FALSE flag specified column.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that values in GWAS summary statistics columns are correct — validate_columns","text":"","code":"validate_columns(   tbl,   col = c(\"B\", \"SE\", \"EAF\", \"N\", \"Z\", \"P\", \"POS\", \"CHR\", \"EffectAllele\", \"OtherAllele\"),   verbose = TRUE,   convert_p = 2.225074e-308 )"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that values in GWAS summary statistics columns are correct — validate_columns","text":"tbl dplyr::tibble() created parse_tbl() col column check values ? verbose Explain filters detail? convert_p value used P = 0?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that values in GWAS summary statistics columns are correct — validate_columns","text":"dplyr::tibble(), column added named invalid_col. validate \"B\" column, validate_columns add TRUE/FALSE column named invalid_B input tibble.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that values in GWAS summary statistics columns are correct — validate_columns","text":"","code":"if (FALSE) { gwas_file <- validate_columns(  tbl = gwas_file,  col = \"B\",  verbose = FALSE,  # if you want to keep 0 pvalues as 0.  convert_p = 0 ) dplyr::filter(gwas_file, invalid_P) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_rsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate format of the RSID column in a GWAS summary statistics file — validate_rsid","title":"Validate format of the RSID column in a GWAS summary statistics file — validate_rsid","text":"Validate format RSID column GWAS summary statistics file","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_rsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate format of the RSID column in a GWAS summary statistics file — validate_rsid","text":"","code":"validate_rsid(tbl, verbose = FALSE, outpath)"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_rsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate format of the RSID column in a GWAS summary statistics file — validate_rsid","text":"tbl dplyr::tibble() created parse_tbl() verbose Explain filters detail? outpath Filepath: write rows invalid RSID?","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_rsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate format of the RSID column in a GWAS summary statistics file — validate_rsid","text":"tbl","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_rsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate format of the RSID column in a GWAS summary statistics file — validate_rsid","text":"","code":"if (FALSE) { validate_rsid(sumstat, \"~/invalid_rsid.parquet\") }"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_sumstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate statistics columns in a GWAS summary statistics file — validate_sumstat","title":"Validate statistics columns in a GWAS summary statistics file — validate_sumstat","text":"Validate statistics columns GWAS summary statistics file","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_sumstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate statistics columns in a GWAS summary statistics file — validate_sumstat","text":"","code":"validate_sumstat(   tbl,   remove_cols = c(\"\"),   filter_func,   verbose = FALSE,   convert_p,   id )"},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_sumstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate statistics columns in a GWAS summary statistics file — validate_sumstat","text":"tbl dplyr::tibble() created parse_tbl() remove_cols Columns validated filter_func handles reporting writing removed files disk verbose Explain filters detail? convert_p value used P = 0? id Used customize messages.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_sumstat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate statistics columns in a GWAS summary statistics file — validate_sumstat","text":"tbl","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/validate_sumstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate statistics columns in a GWAS summary statistics file — validate_sumstat","text":"","code":"if (FALSE) { validate_sumstat(sumstat, remove_cols = \"EffectAllele\", convert_p = 0) }"}]
