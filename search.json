[{"path":"http://arvidharder.com/tidyGWAS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tidyGWAS authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"tidyGWAS","text":"tidyGWAS contains wrapper functions around BSgenome SNPlocs bioconductor packages. quite large dependencies, almost ~14GB, therefore listed “suggests”. want use able infer missing RSID, CHR:POS, packages required.","code":"devtools::install_github(\"ararder/tidyGWAS\") # or remotes::install_github(\"ararder/tidyGWAS\")   # if you want to be able to repair CHR:POS or RSID, you need to download the following # bioconductor packages: if (!require(\"BiocManager\", quietly = TRUE)) install.packages(\"BiocManager\") BiocManager::install(version = \"3.16\") BiocManager::install(\"BSgenome\") BiocManager::install(\"Biostrings\") BiocManager::install(\"GenomicRanges\") BiocManager::install(\"BSgenome.Hsapiens.1000genomes.hs37d5\") BiocManager::install(\"BSgenome.Hsapiens.NCBI.GRCh38\") BiocManager::install(\"SNPlocs.Hsapiens.dbSNP155.GRCh37\") BiocManager::install(\"SNPlocs.Hsapiens.dbSNP155.GRCh38\")"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"tidyGWAS","text":"Automatic parsing column names implemented (probable never ), rename input dataframe tidyGWAS format. following column names accepted. example file looks. mandatory columns either RSID, CHR POS BSgenome SNPlocs packages used store query dbSNP fasta files get CHR, POS, RSID, REF ALT SNPs dbSNP v155. first query dataframe always slower subsequent queries, whenever want munge several summary statistics, ’s get first load points bsgenome snplocs data, can done get_bsgenome(). can skip step align dbSNP, significantly speed running time reduce memory usage, providing bsgnome_objects. update RSID colum, also need provide RsMergeArch file. tidyGWAS attempt read file using filepath provided R enviroment “rs_merge_arch”. 3 seconds 100k rows want information stored logfile disk, can use logfile flag. Note default, tidyGWAS uses folder tempdir store intermediate files. files saved indefinitely, store output data, can also provide output directory want copy finished tidyGWAS oflder dont provide name sumstat cleaning, tidyGWAS uses Sys.time() create random name. can controlled name argument: Oops! now two different folders outdir. feature. outdir meant used many different sumstats want directory, folder structure.","code":"snp_cols <- c(\"CHR\", \"POS\", \"RSID\", \"EffectAllele\", \"OtherAllele\", \"rowid\") info_cols <- c(\"INFO\", \"N\", \"CaseN\", \"ControlN\", \"EAF\") stats_cols <- c(\"B\", \"Z\", \"OR\", \"P\", \"SE\") test_file <- tidyGWAS::test_file test_file |>   dplyr::tibble() #> # A tibble: 100,000 × 12 #>      CHR       POS RSID     EffectAllele OtherAllele        B     SE   EAF  INFO #>    <int>     <int> <chr>    <chr>        <chr>          <dbl>  <dbl> <dbl> <dbl> #>  1     6  31819813 rs18398… C            G           -0.00570 0.0292 0.975 0.936 #>  2    16  13991338 rs80444… T            C           -0.0177  0.0092 0.641 0.951 #>  3     9  85016930 rs11140… A            T           -0.00230 0.0185 0.916 0.701 #>  4    19  15743403 rs48079… C            G            0.00240 0.0099 0.256 0.996 #>  5    18   5948313 rs948293 T            C            0.00170 0.0092 0.332 0.971 #>  6    13  47224772 rs837    G            A            0.0272  0.0086 0.447 1.01  #>  7    10  23782010 rs79100… A            T           -0.0226  0.0091 0.666 0.995 #>  8    12  14061867 rs99718… A            T            0.00780 0.009  0.641 0.999 #>  9     7  57393801 rs48706… A            G           -0.00800 0.0097 0.703 0.942 #> 10     2 222786280 rs824920 T            G            0.00210 0.012  0.150 0.996 #> # ℹ 99,990 more rows #> # ℹ 3 more variables: P <dbl>, CaseN <int>, ControlN <int> bsgenome <- get_bsgenome() # You can download the rs_merge_arch file here: file <- googledrive::as_dribble(\"https://drive.google.com/file/d/1HaES_q8m6rSDDLXvYr0TjQ-ZlyhdZbFX/view?usp=share_link\") googledrive::drive_download(file) # use usethis to set the env variable rs_merge_arch to the filepath to the downloaded file  # usethis::edit_r_environ() # use the small example file stored with tidyGWAS package rs_merge_arch <- tidyGWAS::rs_merge_arch start <- Sys.time() tmp <- tidyGWAS(test_file, rs_merge_arch = rs_merge_arch) #>  #> ── Running tidyGWAS 0.1.0 ────────────────────────────────────────────────────── #> Starting at 2023-08-01 18:13:34.136512 #> Writing out raw sumstats #>  #>  #> ── Performing initial checks on input data:  ── #>  #>  #>  #> ℹ Columns: CHR, POS, RSID, EffectAllele, OtherAllele, B, SE, EAF, INFO, P, CaseN, and ControlN #>  #>  #>  #> ── Examining data for missing values across all columns  #>  #>   • Using tidyr::drop_na() #>  #> ✔ Found no rows with missing values #>  #>  #>  #> ── Checking for insertions/deletions ('indels') using:   #>  #>   1. EffectAllele or OtherAllele, character length > 1: A vs AA #>  #>   2. EffectAllele or OtherAllele coded as 'D', 'I', or 'R' #>  #> ✔ Detected 0 rows as indels #>  #>  #>  #> ── Updating RSIDs that have been merged using RsMergeArch  #>  #> ✔ Updated RSID in 175 rows #>  #>  #>  #> ── Finished initial checks ── #>  #>  #>  #>   • 175 rows with updated RSID: #>   /tmp/RtmpdpV3FK/2023_08_01_18_13_34.099964/2023_08_01_18_13_34.099964/pipeline_info/updated_rsid.log.gz #>  #>  #>  #> ── Starting validation of CHR,POS, RSID, EffectAllele and OtherAllele ── #>  #>  #>  #> ── Validating the RSID column:  #>  #> • Checking that RSID follows rs format: [rR][sS][1-10] #>  #> • If rows fail rs format, look for CHR:POS or CHR:POS:REF:ALT format #>  #> ℹ Found 307 rows with invalid RSID format:  #>  #> ℹ Attempting to parse format... #>  #> ✔ Succeded in parsing 307 out of 307 rows #>  #> ℹ Parsed format: #> # A tibble: 5 × 5 #>   RSID            CHR   POS       EffectAllele OtherAllele #>   <chr>           <chr> <chr>     <chr>        <chr>       #> 1 13:64127045_C_A 13    64127045  C            A           #> 2 2:79900650_T_C  2     79900650  T            C           #> 3 6:102035530_T_G 6     102035530 T            G           #> 4 15:24480820_G_C 15    24480820  G            C           #> 5 11:14359274_C_A 11    14359274  C            A #> ℹ Found CHR and POS in those rows where parsing of RSID failing. Will use CHR and POS columns #>  #> ── Validating CHR  #> 1. CHR coerced to character `base::as.character()` #> 2. converted to uppercase `stringr::str_to_upper()` #> 3. 'CHR' removed (handles UCSC style CHR format) #> 4. Check for values outside 1:22, X, Y #> 5. Check for NA #> ✔ All rows pass chr validation #>  #> ── Validating POS  #> 1. POS coerced to integer `base::as.integer()` #> 2. Checks for NA, NaN, Inf #> 3. Checks for POS <= 0 #> 4. Check for POS >= 10^9 #> ✔ All rows pass pos validation #>  #> ── Validating EffectAllele and OtherAllele:  #> 1. Will error if not type = character #> 2. EffectAllele and OtherAllele converted to uppercase #> 3. Check for EA/OA values that are not A,C,G or T #> 4. Check for NA #> ✔ All rows pass EA/OA validation #>  #> ── Listing how many rows are removed per flag:  ── #>  #> invalid_rsid: 307 #> invalid_chr: 0 #> invalid_pos: 0 #> invalid_ea_oa: 0 #> Removed a total of 307 rows: #> /tmp/RtmpdpV3FK/2023_08_01_18_13_34.099964/2023_08_01_18_13_34.099964/pipeline_info/validate_snps.log.gz #> ── Validating statistics columns: B, P, SE, INFO, N, CaseN, ControlN, and EAF ── #>  #> ── Validating the EAF column:  #> 1. Will coerce to double: base::as.double() #> 2. Check for EAF <= 0 & EAF >= 1 #> 3. Checks for NA, NaN or Inf #> ✔ All rows pass EAF validation #>  #> ── Validating the SE column:  #> 1. Will coerce to double: base::as.double() #> 2. Check for SE <= 0 #> 3. Checks for NA, NaN or Inf #> ✔ All rows pass SE validation #>  #> ── Validating the P column:  #> 1. Coerce to double `base::as.double()` #> 2. If P == 0, P is converted to `2.225074e-308`. Adjust by passing convert_p = #> 'your_preferred_value' #> 3. checks for NA, NaN or Inf #> 4. checks that P is within the range: P >= 0 & P > 1 #> ✔ All rows pass P validation #>  #> ── Validating the B column:  #> 1. Will coerce to double: base::as.double() #> 2. Check for mislabelled OR by looking at median value #> 3. checks for NA, NaN or Inf #> 4. Print median value #> ℹ The median value of B is -0.00120072057651888, which seems reasonable #> ✔ All rows pass B validation #>  #> ── Validating the N column:  #> 1. Will coerce to integer: base::as.integer() #> 2. Check for N <= 0 #> 3. Checks for NA, NaN or Inf #> ✔ All rows pass N validation #>  #> ── Listing how many rows are removed per flag:  ── #>  #> ✔ No rows were removed by these flags #>  #> ── Finished tidyGWAS ─────────────────────────────────────────────────────────── #> ℹ A total of 307 rows were removed. Started with: 100000 rows, ended with: 99693 rows #>  #> ── Listing final breakdown of removed rows:   #> validate_snps: 307 end <- Sys.time() end - start #> Time difference of 2.364134 secs #> ℹ Output is redirected to logfile: /tmp/RtmpdpV3FK/2023_08_01_18_13_36.612778/2023_08_01_18_13_36.612778/tidyGWAS_logfile.txt #>  #> ── Running tidyGWAS 0.1.0 ────────────────────────────────────────────────────── #> Starting at 2023-08-01 18:13:36.635084 #> Writing out raw sumstats #>  #>  #> ── Performing initial checks on input data:  ── #>  #>  #>  #> ℹ Columns: CHR, POS, RSID, EffectAllele, OtherAllele, B, SE, EAF, INFO, P, CaseN, and ControlN #>  #>  #>  #> ── Examining data for missing values across all columns  #>  #>   • Using tidyr::drop_na() #>  #> ✔ Found no rows with missing values #>  #>  #>  #> ── Checking for insertions/deletions ('indels') using:   #>  #>   1. EffectAllele or OtherAllele, character length > 1: A vs AA #>  #>   2. EffectAllele or OtherAllele coded as 'D', 'I', or 'R' #>  #> ✔ Detected 0 rows as indels #>  #>  #>  #> ── Updating RSIDs that have been merged using RsMergeArch  #>  #> ✔ Updated RSID in 175 rows #>  #>  #>  #> ── Finished initial checks ── #>  #>  #>  #>   • 175 rows with updated RSID: #>   /tmp/RtmpdpV3FK/2023_08_01_18_13_36.612778/2023_08_01_18_13_36.612778/pipeline_info/updated_rsid.log.gz #>  #>  #>  #> ── Starting validation of CHR,POS, RSID, EffectAllele and OtherAllele ── #>  #>  #>  #> ── Validating the RSID column:  #>  #> • Checking that RSID follows rs format: [rR][sS][1-10] #>  #> • If rows fail rs format, look for CHR:POS or CHR:POS:REF:ALT format #>  #> ℹ Found 307 rows with invalid RSID format:  #>  #> ℹ Attempting to parse format... #>  #> ✔ Succeded in parsing 307 out of 307 rows #>  #> ℹ Parsed format:  #>  #> ℹ Found CHR and POS in those rows where parsing of RSID failing. Will use CHR and POS columns #>  #>  #>  #> ── Validating CHR  #>  #> 1. CHR coerced to character `base::as.character()` #>  #> 2. converted to uppercase `stringr::str_to_upper()` #>  #> 3. 'CHR' removed (handles UCSC style CHR format) #>  #> 4. Check for values outside 1:22, X, Y #>  #> 5. Check for NA #>  #> ✔ All rows pass chr validation #>  #>  #>  #> ── Validating POS  #>  #> 1. POS coerced to integer `base::as.integer()` #>  #> 2. Checks for NA, NaN, Inf #>  #> 3. Checks for POS <= 0 #>  #> 4. Check for POS >= 10^9 #>  #> ✔ All rows pass pos validation #>  #>  #>  #> ── Validating EffectAllele and OtherAllele:  #>  #> 1. Will error if not type = character #>  #> 2. EffectAllele and OtherAllele converted to uppercase #>  #> 3. Check for EA/OA values that are not A,C,G or T #>  #> 4. Check for NA #>  #> ✔ All rows pass EA/OA validation #>  #>  #>  #> ── Listing how many rows are removed per flag:  ── #>  #>  #>  #> invalid_rsid: 307 #>  #> invalid_chr: 0 #>  #> invalid_pos: 0 #>  #> invalid_ea_oa: 0 #>  #> Removed a total of 307 rows: #> /tmp/RtmpdpV3FK/2023_08_01_18_13_36.612778/2023_08_01_18_13_36.612778/pipeline_info/validate_snps.log.gz #>  #>  #> ── Validating statistics columns: B, P, SE, INFO, N, CaseN, ControlN, and EAF ── #>  #>  #>  #> ── Validating the EAF column:  #>  #> 1. Will coerce to double: base::as.double() #>  #> 2. Check for EAF <= 0 & EAF >= 1 #>  #> 3. Checks for NA, NaN or Inf #>  #> ✔ All rows pass EAF validation #>  #>  #>  #> ── Validating the SE column:  #>  #> 1. Will coerce to double: base::as.double() #>  #> 2. Check for SE <= 0 #>  #> 3. Checks for NA, NaN or Inf #>  #> ✔ All rows pass SE validation #>  #>  #>  #> ── Validating the P column:  #>  #> 1. Coerce to double `base::as.double()` #>  #> 2. If P == 0, P is converted to `2.225074e-308`. Adjust by passing convert_p = #> 'your_preferred_value' #>  #> 3. checks for NA, NaN or Inf #>  #> 4. checks that P is within the range: P >= 0 & P > 1 #>  #> ✔ All rows pass P validation #>  #>  #>  #> ── Validating the B column:  #>  #> 1. Will coerce to double: base::as.double() #>  #> 2. Check for mislabelled OR by looking at median value #>  #> 3. checks for NA, NaN or Inf #>  #> 4. Print median value #>  #> ℹ The median value of B is -0.00120072057651888, which seems reasonable #>  #> ✔ All rows pass B validation #>  #>  #>  #> ── Validating the N column:  #>  #> 1. Will coerce to integer: base::as.integer() #>  #> 2. Check for N <= 0 #>  #> 3. Checks for NA, NaN or Inf #>  #> ✔ All rows pass N validation #>  #>  #>  #> ── Listing how many rows are removed per flag:  ── #>  #>  #>  #> ✔ No rows were removed by these flags #>  #>  #>  #> ── Finished tidyGWAS ─────────────────────────────────────────────────────────── #>  #> ℹ A total of 307 rows were removed. Started with: 100000 rows, ended with: 99693 rows #>  #>  #>  #> ── Listing final breakdown of removed rows:   #>  #> validate_snps: 307 #> NULL list.files(my_outdir, recursive = TRUE) #> [1] \"2023_08_01_18_13_36.612778/cleaned_GRCh38.gz\"                   #> [2] \"2023_08_01_18_13_36.612778/pipeline_info/start_ids.tsv.gz\"      #> [3] \"2023_08_01_18_13_36.612778/pipeline_info/updated_rsid.log.gz\"   #> [4] \"2023_08_01_18_13_36.612778/pipeline_info/validate_snps.log.gz\"  #> [5] \"2023_08_01_18_13_36.612778/pipeline_info/validate_stats.log.gz\" #> [6] \"2023_08_01_18_13_36.612778/raw_sumstats.gz\"                     #> [7] \"2023_08_01_18_13_36.612778/tidyGWAS_logfile.txt\" #> ℹ Output is redirected to logfile: /tmp/RtmpdpV3FK/first_gwas/first_gwas/tidyGWAS_logfile.txt #>  #> ── Running tidyGWAS 0.1.0 ────────────────────────────────────────────────────── #> Starting at 2023-08-01 18:13:39.655009 #> Writing out raw sumstats #>  #>  #> ── Performing initial checks on input data:  ── #>  #>  #>  #> ℹ Columns: CHR, POS, RSID, EffectAllele, OtherAllele, B, SE, EAF, INFO, P, CaseN, and ControlN #>  #>  #>  #> ── Examining data for missing values across all columns  #>  #>   • Using tidyr::drop_na() #>  #> ✔ Found no rows with missing values #>  #>  #>  #> ── Checking for insertions/deletions ('indels') using:   #>  #>   1. EffectAllele or OtherAllele, character length > 1: A vs AA #>  #>   2. EffectAllele or OtherAllele coded as 'D', 'I', or 'R' #>  #> ✔ Detected 0 rows as indels #>  #>  #>  #> ── Updating RSIDs that have been merged using RsMergeArch  #>  #> ✔ Updated RSID in 175 rows #>  #>  #>  #> ── Finished initial checks ── #>  #>  #>  #>   • 175 rows with updated RSID: #>   /tmp/RtmpdpV3FK/first_gwas/first_gwas/pipeline_info/updated_rsid.log.gz #>  #>  #>  #> ── Starting validation of CHR,POS, RSID, EffectAllele and OtherAllele ── #>  #>  #>  #> ── Validating the RSID column:  #>  #> • Checking that RSID follows rs format: [rR][sS][1-10] #>  #> • If rows fail rs format, look for CHR:POS or CHR:POS:REF:ALT format #>  #> ℹ Found 307 rows with invalid RSID format:  #>  #> ℹ Attempting to parse format... #>  #> ✔ Succeded in parsing 307 out of 307 rows #>  #> ℹ Parsed format:  #>  #> ℹ Found CHR and POS in those rows where parsing of RSID failing. Will use CHR and POS columns #>  #>  #>  #> ── Validating CHR  #>  #> 1. CHR coerced to character `base::as.character()` #>  #> 2. converted to uppercase `stringr::str_to_upper()` #>  #> 3. 'CHR' removed (handles UCSC style CHR format) #>  #> 4. Check for values outside 1:22, X, Y #>  #> 5. Check for NA #>  #> ✔ All rows pass chr validation #>  #>  #>  #> ── Validating POS  #>  #> 1. POS coerced to integer `base::as.integer()` #>  #> 2. Checks for NA, NaN, Inf #>  #> 3. Checks for POS <= 0 #>  #> 4. Check for POS >= 10^9 #>  #> ✔ All rows pass pos validation #>  #>  #>  #> ── Validating EffectAllele and OtherAllele:  #>  #> 1. Will error if not type = character #>  #> 2. EffectAllele and OtherAllele converted to uppercase #>  #> 3. Check for EA/OA values that are not A,C,G or T #>  #> 4. Check for NA #>  #> ✔ All rows pass EA/OA validation #>  #>  #>  #> ── Listing how many rows are removed per flag:  ── #>  #>  #>  #> invalid_rsid: 307 #>  #> invalid_chr: 0 #>  #> invalid_pos: 0 #>  #> invalid_ea_oa: 0 #>  #> Removed a total of 307 rows: #> /tmp/RtmpdpV3FK/first_gwas/first_gwas/pipeline_info/validate_snps.log.gz #>  #>  #> ── Validating statistics columns: B, P, SE, INFO, N, CaseN, ControlN, and EAF ── #>  #>  #>  #> ── Validating the EAF column:  #>  #> 1. Will coerce to double: base::as.double() #>  #> 2. Check for EAF <= 0 & EAF >= 1 #>  #> 3. Checks for NA, NaN or Inf #>  #> ✔ All rows pass EAF validation #>  #>  #>  #> ── Validating the SE column:  #>  #> 1. Will coerce to double: base::as.double() #>  #> 2. Check for SE <= 0 #>  #> 3. Checks for NA, NaN or Inf #>  #> ✔ All rows pass SE validation #>  #>  #>  #> ── Validating the P column:  #>  #> 1. Coerce to double `base::as.double()` #>  #> 2. If P == 0, P is converted to `2.225074e-308`. Adjust by passing convert_p = #> 'your_preferred_value' #>  #> 3. checks for NA, NaN or Inf #>  #> 4. checks that P is within the range: P >= 0 & P > 1 #>  #> ✔ All rows pass P validation #>  #>  #>  #> ── Validating the B column:  #>  #> 1. Will coerce to double: base::as.double() #>  #> 2. Check for mislabelled OR by looking at median value #>  #> 3. checks for NA, NaN or Inf #>  #> 4. Print median value #>  #> ℹ The median value of B is -0.00120072057651888, which seems reasonable #>  #> ✔ All rows pass B validation #>  #>  #>  #> ── Validating the N column:  #>  #> 1. Will coerce to integer: base::as.integer() #>  #> 2. Check for N <= 0 #>  #> 3. Checks for NA, NaN or Inf #>  #> ✔ All rows pass N validation #>  #>  #>  #> ── Listing how many rows are removed per flag:  ── #>  #>  #>  #> ✔ No rows were removed by these flags #>  #>  #>  #> ── Finished tidyGWAS ─────────────────────────────────────────────────────────── #>  #> ℹ A total of 307 rows were removed. Started with: 100000 rows, ended with: 99693 rows #>  #>  #>  #> ── Listing final breakdown of removed rows:   #>  #> validate_snps: 307 #> NULL #>  [1] \"2023_08_01_18_13_36.612778/cleaned_GRCh38.gz\"                   #>  [2] \"2023_08_01_18_13_36.612778/pipeline_info/start_ids.tsv.gz\"      #>  [3] \"2023_08_01_18_13_36.612778/pipeline_info/updated_rsid.log.gz\"   #>  [4] \"2023_08_01_18_13_36.612778/pipeline_info/validate_snps.log.gz\"  #>  [5] \"2023_08_01_18_13_36.612778/pipeline_info/validate_stats.log.gz\" #>  [6] \"2023_08_01_18_13_36.612778/raw_sumstats.gz\"                     #>  [7] \"2023_08_01_18_13_36.612778/tidyGWAS_logfile.txt\"                #>  [8] \"first_gwas/cleaned_GRCh38.gz\"                                   #>  [9] \"first_gwas/pipeline_info/start_ids.tsv.gz\"                      #> [10] \"first_gwas/pipeline_info/updated_rsid.log.gz\"                   #> [11] \"first_gwas/pipeline_info/validate_snps.log.gz\"                  #> [12] \"first_gwas/pipeline_info/validate_stats.log.gz\"                 #> [13] \"first_gwas/raw_sumstats.gz\"                                     #> [14] \"first_gwas/tidyGWAS_logfile.txt\""},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"the-functions-within","dir":"Articles","previous_headings":"Getting started","what":"The functions within","title":"tidyGWAS","text":"tidyGWAS exposes several smaller functions can help interactively working sumstats.","code":""},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"getting-b-and-se-from-z-n-and-eaf","dir":"Articles","previous_headings":"Getting started","what":"Getting B and SE from Z, N and EAF","title":"tidyGWAS","text":"repair_stats() can used add missing statistics column, P, Z, B SE, depending columns exist. Note ","code":"# Has Z , EAF and N, but not B and SE (Which are commonly used for PRS) tmp <- dplyr::mutate(test_file, Z = B/SE, N = CaseN + ControlN) |>    dplyr::select(-B, -SE) repaired <- repair_stats(tmp) #>  #> ── Repairing missing statistics columns: #> 1. Transform OR to B if OR exists #> 2. Remove OR if both OR and B exists #> 3. Impute Z based on B and SE if both B and SE exist and Z is missing #> 4. Impute Z based on P and B if Z and SE is missing #> 5. Impute B and SE if both are missing, and Z, EAF and N is present #>  #> ── Starting reparations: #> ℹ Imputing B and SE, using Z, EAF and N . The B and SE will correspond to a standardized scale, which might not always be the same scale that the original betas was on. #> ℹ Checking for NaN, Inf or NA in numeric columns #> → Found no columns containing NA/Inf/NaN #>  #> ── Finished repair_stats: #> ℹ Added 2 new columns: B and SE  # the Betas will be on a standardized scale, and can therefore be different # than what was initially there dplyr::inner_join(test_file, repaired,by = \"RSID\") |> dplyr::select(B.x, B.y) |>    dplyr::summarise(cor(B.x, B.y)) #>   cor(B.x, B.y) #> 1     0.9956026   # Getting Z, if you only have B and P tmp <-  dplyr::select(test_file,  -SE) |>    repair_stats() #>  #> ── Repairing missing statistics columns: #> 1. Transform OR to B if OR exists #> 2. Remove OR if both OR and B exists #> 3. Impute Z based on B and SE if both B and SE exist and Z is missing #> 4. Impute Z based on P and B if Z and SE is missing #> 5. Impute B and SE if both are missing, and Z, EAF and N is present #>  #> ── Starting reparations: #> ℹ Found B and P but not Z. Imputing Z using: #> sign(beta) * sqrt(stats::qchisq(pvalue,1,lower=FALSE)) #> ℹ Checking for NaN, Inf or NA in numeric columns #> → Found no columns containing NA/Inf/NaN #>  #> ── Finished repair_stats: #> ℹ Added 1 new columns: Z"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"identifying-incorrect-rsids","dir":"Articles","previous_headings":"Getting started","what":"Identifying incorrect RSIDs","title":"tidyGWAS","text":"uses regex identify non RrSs rows.","code":"flag_incorrect_rsid_format(test_file) |>    dplyr::filter(invalid_rsid)"},{"path":"http://arvidharder.com/tidyGWAS/articles/tidyGWAS.html","id":"a-fast-function-for-finding-duplications-in-rsid-or-chr","dir":"Articles","previous_headings":"Getting started","what":"A fast function for finding duplications in RSID or CHR","title":"tidyGWAS","text":"","code":"flag_duplicates(test_file, column = \"rsid\") #>         CHR       POS        RSID EffectAllele OtherAllele            B     SE #>      1:   6  31819813 rs183988210            C           G -0.005696193 0.0292 #>      2:  16  13991338   rs8044430            T           C -0.017695649 0.0092 #>      3:   9  85016930 rs111404043            A           T -0.002302649 0.0185 #>      4:  19  15743403   rs4807961            C           G  0.002397125 0.0099 #>      5:  18   5948313    rs948293            T           C  0.001698557 0.0092 #>     ---                                                                        #>  99996:  10 132193006   rs7904068            T           C  0.020096702 0.0102 #>  99997:  17  31324100  rs16967856            C           T  0.006101349 0.0252 #>  99998:   7  33310046  rs10246533            G           A -0.008102739 0.0086 #>  99999:  11 107469336    rs597383            G           C -0.005404578 0.0159 #> 100000:   2 101246512  rs10173962            C           T  0.004798469 0.0090 #>               EAF  INFO       P CaseN ControlN dup_rsid #>      1: 0.9754088 0.936 0.84440 51235    74087    FALSE #>      2: 0.6407741 0.951 0.05315 53386    77258    FALSE #>      3: 0.9160000 0.701 0.89970 53386    77258    FALSE #>      4: 0.2556345 0.996 0.80740 53386    77258    FALSE #>      5: 0.3318173 0.971 0.85780 53386    77258    FALSE #>     ---                                                 #>  99996: 0.7658173 0.991 0.04839 53386    77258    FALSE #>  99997: 0.9670000 0.930 0.80840 53386    77258    FALSE #>  99998: 0.4740000 0.999 0.34810 53386    77258    FALSE #>  99999: 0.9201827 0.997 0.73210 53386    77258    FALSE #> 100000: 0.6391827 0.995 0.58960 53386    77258    FALSE # or  flag_duplicates(test_file, column = \"chr_pos\") #>         CHR       POS        RSID EffectAllele OtherAllele            B     SE #>      1:   6  31819813 rs183988210            C           G -0.005696193 0.0292 #>      2:  16  13991338   rs8044430            T           C -0.017695649 0.0092 #>      3:   9  85016930 rs111404043            A           T -0.002302649 0.0185 #>      4:  19  15743403   rs4807961            C           G  0.002397125 0.0099 #>      5:  18   5948313    rs948293            T           C  0.001698557 0.0092 #>     ---                                                                        #>  99996:  10 132193006   rs7904068            T           C  0.020096702 0.0102 #>  99997:  17  31324100  rs16967856            C           T  0.006101349 0.0252 #>  99998:   7  33310046  rs10246533            G           A -0.008102739 0.0086 #>  99999:  11 107469336    rs597383            G           C -0.005404578 0.0159 #> 100000:   2 101246512  rs10173962            C           T  0.004798469 0.0090 #>               EAF  INFO       P CaseN ControlN dup_chr_pos #>      1: 0.9754088 0.936 0.84440 51235    74087       FALSE #>      2: 0.6407741 0.951 0.05315 53386    77258       FALSE #>      3: 0.9160000 0.701 0.89970 53386    77258       FALSE #>      4: 0.2556345 0.996 0.80740 53386    77258       FALSE #>      5: 0.3318173 0.971 0.85780 53386    77258       FALSE #>     ---                                                    #>  99996: 0.7658173 0.991 0.04839 53386    77258       FALSE #>  99997: 0.9670000 0.930 0.80840 53386    77258       FALSE #>  99998: 0.4740000 0.999 0.34810 53386    77258       FALSE #>  99999: 0.9201827 0.997 0.73210 53386    77258       FALSE #> 100000: 0.6391827 0.995 0.58960 53386    77258       FALSE"},{"path":"http://arvidharder.com/tidyGWAS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Arvid Harder. Maintainer.","code":""},{"path":"http://arvidharder.com/tidyGWAS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harder (2023). tidyGWAS: Quality control GWAS summary statistics. R package version 0.1.0, http://arvidharder.com/tidyGWAS/.","code":"@Manual{,   title = {tidyGWAS: Quality control for GWAS summary statistics},   author = {Arvid Harder},   year = {2023},   note = {R package version 0.1.0},   url = {http://arvidharder.com/tidyGWAS/}, }"},{"path":"http://arvidharder.com/tidyGWAS/index.html","id":"tidygwas","dir":"","previous_headings":"","what":"Quality control for GWAS summary statistics","title":"Quality control for GWAS summary statistics","text":"goal tidyGWAS provide easy-use R package written typical tidyverse/dplyr syntax make cleaning collection sumstats simple, stop analysts falling common error. addition provide helpers standardise GWAS data: Reparation stats columns possible (missing B/SE/P), well default providing coordinates GRCh37 GRCh38. early design goal tidyGWAS keep many rows possible. default options therefore keep multi-allelic SNPs ambigious SNPs, suggest handle depending downstream analysis tool wish use.","code":""},{"path":"http://arvidharder.com/tidyGWAS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Quality control for GWAS summary statistics","text":"can install development version tidyGWAS GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"Ararder/tidyGWAS\")  # To install the Bioconductor packages required to use dbSNP BiocManager::install(version = \"3.16\") BiocManager::install(\"BSgenome\") BiocManager::install(\"Biostrings\") BiocManager::install(\"BSgenome.Hsapiens.1000genomes.hs37d5\") BiocManager::install(\"BSgenome.Hsapiens.NCBI.GRCh38\") BiocManager::install(\"SNPlocs.Hsapiens.dbSNP155.GRCh37\") BiocManager::install(\"SNPlocs.Hsapiens.dbSNP155.GRCh38\")"},{"path":"http://arvidharder.com/tidyGWAS/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Quality control for GWAS summary statistics","text":"see vignette “tidyGWAS”","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast detection of duplicates in RSID or CHR and POS columns — flag_duplicates","title":"Fast detection of duplicates in RSID or CHR and POS columns — flag_duplicates","text":"creates new column: `dup_rsid` `dup_chr_pos`, T/F flag. Specifically, flags rows duplication pair, just first last duplicate row, making easy work rows part duplication","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast detection of duplicates in RSID or CHR and POS columns — flag_duplicates","text":"","code":"flag_duplicates(tbl, column = \"rsid\")"},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast detection of duplicates in RSID or CHR and POS columns — flag_duplicates","text":"tbl tibble tidyGWAS column names column construct id either 'rsid' 'chr_pos'","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast detection of duplicates in RSID or CHR and POS columns — flag_duplicates","text":"tibble","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/flag_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast detection of duplicates in RSID or CHR and POS columns — flag_duplicates","text":"","code":"if (FALSE) { flag_duplicates(tbl, column = \"chr_pos\") flag_duplicates(tbl, column = \"crsid\")  }"},{"path":"http://arvidharder.com/tidyGWAS/reference/get_bsgenome.html","id":null,"dir":"Reference","previous_headings":"","what":"load SNPlocs and REF genome for GRCh 37 and 38 — get_bsgenome","title":"load SNPlocs and REF genome for GRCh 37 and 38 — get_bsgenome","text":"load SNPlocs REF genome GRCh 37 38","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/get_bsgenome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"load SNPlocs and REF genome for GRCh 37 and 38 — get_bsgenome","text":"","code":"get_bsgenome()"},{"path":"http://arvidharder.com/tidyGWAS/reference/get_bsgenome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"load SNPlocs and REF genome for GRCh 37 and 38 — get_bsgenome","text":"list SNPlocs BSgenome objects","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/get_bsgenome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"load SNPlocs and REF genome for GRCh 37 and 38 — get_bsgenome","text":"","code":"if (FALSE) { bsgenome <- get_bsgenome() }"},{"path":"http://arvidharder.com/tidyGWAS/reference/get_ref_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in RsMergeArch file — get_ref_data","title":"Read in RsMergeArch file — get_ref_data","text":"Read RsMergeArch file","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/get_ref_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in RsMergeArch file — get_ref_data","text":"","code":"get_ref_data()"},{"path":"http://arvidharder.com/tidyGWAS/reference/get_ref_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in RsMergeArch file — get_ref_data","text":"tibble","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/get_ref_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in RsMergeArch file — get_ref_data","text":"","code":"if (FALSE) { rs_merge_arch <- get_ref_data() }"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CHR and POS from a reference genome with rsID — repair_chr_pos","title":"Get CHR and POS from a reference genome with rsID — repair_chr_pos","text":"Get CHR POS reference genome rsID","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CHR and POS from a reference genome with rsID — repair_chr_pos","text":"","code":"repair_chr_pos(sumstat, bsgenome_objects, .filter_callback)"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CHR and POS from a reference genome with rsID — repair_chr_pos","text":"sumstat dplyr::tibble atleast RSID, EffectAllele OtherAllele bsgenome_objects list containing BSgenome genoms snp_locs. see get_bsgenome_objects .filter_callback function can run end.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CHR and POS from a reference genome with rsID — repair_chr_pos","text":"tibble","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_chr_pos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get CHR and POS from a reference genome with rsID — repair_chr_pos","text":"","code":"if (FALSE) { sumstat_df <- repair_chr_pos(sumstat, bsgenome_list) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get RSID from either GRCh37 or GRCh38 reference genome, using CHR and POS — repair_rsid","title":"Get RSID from either GRCh37 or GRCh38 reference genome, using CHR and POS — repair_rsid","text":"Get RSID either GRCh37 GRCh38 reference genome, using CHR POS","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get RSID from either GRCh37 or GRCh38 reference genome, using CHR and POS — repair_rsid","text":"","code":"repair_rsid(sumstat, bsgenome_objects, build, .filter_callback)"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get RSID from either GRCh37 or GRCh38 reference genome, using CHR and POS — repair_rsid","text":"sumstat dplyr:: tibble atleast CHR,POS, EffectAllele OtherAllele bsgenome_objects list containing BSgenome genoms snp_locs. see get_bsgenome_objects build genome build, either '37' '38' .filter_callback function run end, dataframe input","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get RSID from either GRCh37 or GRCh38 reference genome, using CHR and POS — repair_rsid","text":"tibble","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_rsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get RSID from either GRCh37 or GRCh38 reference genome, using CHR and POS — repair_rsid","text":"","code":"if (FALSE) { sumstat_df <- repair_rsid(sumstat, bsgenome_list) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"Requires tidyGWAS column format","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"","code":"repair_stats(tbl)"},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"tbl input tibble (data frame) GWAS sumamry statistics.","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"tibble","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/repair_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repair statistics column in a GWAS summary statistics tibble — repair_stats","text":"","code":"if (FALSE) { updated <- repair_stats(my_gwas) }"},{"path":"http://arvidharder.com/tidyGWAS/reference/rs_merge_arch.html","id":null,"dir":"Reference","previous_headings":"","what":"RsMergeArch — rs_merge_arch","title":"RsMergeArch — rs_merge_arch","text":"small subset RsMergeArch dbsNP 151, updated format. Consists 175 rows test_file RSID merged","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/rs_merge_arch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RsMergeArch — rs_merge_arch","text":"","code":"rs_merge_arch"},{"path":"http://arvidharder.com/tidyGWAS/reference/rs_merge_arch.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RsMergeArch — rs_merge_arch","text":"## `rs_merge_arch` data frame 172 rows 2 columns: RSID old, retracted RSID new_RSID new RSID, one remains merge RSID","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/rs_merge_arch.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"RsMergeArch — rs_merge_arch","text":"<https://ftp.ncbi.nih.gov/snp/organisms/human_9606_b151_GRCh38p7/database/organism_data/RsMergeArch.bcp.gz>","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":null,"dir":"Reference","previous_headings":"","what":"PGC3 schizophrenia GWAS — test_file","title":"PGC3 schizophrenia GWAS — test_file","text":"subset data Psychiatics Genonomics Consortium GWAS schizophrenia (european subset)","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PGC3 schizophrenia GWAS — test_file","text":"","code":"test_file"},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PGC3 schizophrenia GWAS — test_file","text":"## `test_file` data frame 100,000 rows 12 columns: CHR Chromosome POS Genomic position RSID rsID dbSNP EffecttAllele allele correspods effect, B OtherAllelle Non-effect allele B Effect, Beta SE Standard error B EAF EffectAllele Frequency, frequency EffectAllele INFO Imputation accuracy P Pvalue CaseN Number cases ControlN Number controls","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/test_file.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PGC3 schizophrenia GWAS — test_file","text":"<https://figshare.com/ndownloader/files/34517828>","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean GWAS summary statistics — tidyGWAS","title":"Clean GWAS summary statistics — tidyGWAS","text":"Clean GWAS summary statistics","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean GWAS summary statistics — tidyGWAS","text":"","code":"tidyGWAS(tbl, bsgenome_objects, logfile = FALSE, name, outdir, ...)"},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean GWAS summary statistics — tidyGWAS","text":"tbl tibble filepath bsgenome_objects use get_bsgenome() logfile Write messages logfile? name name output directory outdir copy results finished ... arguments functions, study_n, build","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean GWAS summary statistics — tidyGWAS","text":"tibble NULL, depending outdir","code":""},{"path":"http://arvidharder.com/tidyGWAS/reference/tidyGWAS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean GWAS summary statistics — tidyGWAS","text":"","code":"if (FALSE) { tidyGWAS(tbl = \"my_dataframe\", logfile = \"true\", name = \"test_run\", outdir = \"gwas_sumstat_dir\") }"}]
